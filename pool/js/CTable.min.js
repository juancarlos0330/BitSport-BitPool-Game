function CTable(e, t) {
  var s,
    r,
    i,
    a,
    o,
    n,
    l,
    _,
    g,
    c,
    h,
    E,
    u,
    T,
    C,
    A,
    d,
    O,
    S,
    L,
    P,
    f,
    B,
    N,
    v,
    m,
    I,
    p,
    b,
    R,
    w,
    M,
    V,
    D,
    G,
    y,
    Y,
    U,
    X,
    H,
    k,
    W,
    x,
    F,
    K,
    j,
    z,
    J,
    Q,
    q,
    Z = e;
  (this._init = function (e) {
    (T = new Array()),
      (C = new Array()),
      (q = new Array()),
      (Q = e),
      this.reset();
    var t = s_oSpriteLibrary.getSprite("pool_table");
    (TABLE_CENTER = {
      x: CANVAS_WIDTH / 2 - t.width / 4,
      y: CANVAS_HEIGHT / 2 - t.height / 4,
    }),
      (x = new createjs.Container()),
      s_oStageUpper3D.addChild(x),
      (H = new createjs.Container()),
      (x.x = H.x = CANVAS_WIDTH / 2 - t.width / 2),
      (x.y = H.y = CANVAS_HEIGHT / 2 - t.height / 2),
      Z.addChild(H);
    var s = createBitmap(t);
    if (
      (H.addChild(s),
      (TABLE_CENTER_COORDINATE = new CVector2(
        CANVAS_WIDTH / 2 - t.width / 4,
        CANVAS_HEIGHT / 2 - t.height / 4
      )),
      DEBUG_SHOW_TABLE_CENTER_SHAPE && this._createGraphicCenterTableShape(),
      this._initTableEdges(),
      DEBUG_SHOW_RECT_COLLISION)
    ) {
      var r = new createjs.Shape();
      r.graphics
        .beginStroke("red")
        .drawRect(
          RECT_COLLISION.x,
          RECT_COLLISION.y,
          RECT_COLLISION.width,
          RECT_COLLISION.height
        ),
        x.addChild(r);
    }
    (y = new createjs.Shape()).graphics
      .beginFill("red")
      .drawRect(-150, -150, t.width + 300, t.height - 60 + 300),
      (y.alpha = 0.01),
      y.cache(-150, -150, t.width + 300, t.height - 60 + 300),
      H.addChild(y),
      this.initBalls(),
      (k = new createjs.Container()),
      x.addChild(k),
      ((W = new createjs.Container()).visible = !1),
      H.addChild(W),
      this._createTableDownUpperBumper(),
      (Y = new CStick(x)),
      this.initStick(),
      (z = ON_CUE_PLACEABLE);
    i = new createjs.Graphics();
    (M = new createjs.Shape(i)), H.addChild(M);
    i = new createjs.Graphics();
    (V = new createjs.Shape(i)), H.addChild(V);
    i = new createjs.Graphics();
    (D = new createjs.Shape(i)), H.addChild(D);
    var i = new createjs.Graphics()
      .beginStroke("#fff")
      .drawCircle(0, 0, BALL_DIAMETER / 2);
    if (
      ((G = new createjs.Shape(i)),
      (G.visible = !1),
      H.addChild(G),
      DEBUG_SHOW_HOLE_CENTER_POS_SHAPE)
    )
      for (var a = 0; a < HOLE_CENTER_POS.length; a++) {
        var o = createGraphicCircle(
          HOLE_CENTER_POS[a],
          BALL_RADIUS,
          null,
          "#fff"
        );
        H.addChild(o);
      }
    (w = new CPhysicsController(H)),
      (j = l = STATE_TABLE_NONE),
      this._placeCueBall(),
      this.updateStick(),
      N.set(1, 0),
      (F = new CHandBallDrag(x)).setPos(U.getX(), U.getY()),
      DEBUG_SHOW_EDGE_TABLE && this.renderEdges();
  }),
    (this._createTableDownUpperBumper = function () {
      for (var e = 0; e < TABLE_UPPER_BUMPER.length; e++) {
        var t = s_oSpriteLibrary.getSprite(TABLE_UPPER_BUMPER[e].sprite),
          s = createBitmap(t);
        (s.x = TABLE_UPPER_BUMPER[e].x), (s.y = TABLE_UPPER_BUMPER[e].y);
        var r = t.width / TABLE_UPPER_BUMPER[e].regX,
          i = t.height / TABLE_UPPER_BUMPER[e].regY;
        (s.regX = r === 1 / 0 ? 0 : r),
          (s.regY = i === 1 / 0 ? 0 : i),
          k.addChild(s);
        var a = createBitmap(t);
        (a.x = s.x),
          (a.y = s.y),
          (a.regX = s.regX),
          (a.regY = s.regY),
          W.addChild(a);
      }
    }),
    (this._createGraphicCenterTableShape = function () {
      var e = createGraphicCircle(
        {
          x: TABLE_CENTER_COORDINATE.getX(),
          y: TABLE_CENTER_COORDINATE.getY(),
        },
        10,
        null,
        "rgba(255,255,255,1)"
      );
      H.addChild(e);
    }),
    (this.addEventListener = function (e, t, s) {
      (T[e] = t), (C[e] = s);
    }),
    (this._onCollisionBallWithBall = function (e, t, s) {
      if (0 !== s) {
        var r = linearFunction(s, 0.1, 40, 0.05, 1);
        this._playTableSound("ball_collision", r, 100);
      }
    }),
    (this._playTableSound = function (e, t, s) {
      for (
        var r = !0, i = 0, a = new Date().getTime(), o = 0;
        o < q.length;
        o++
      )
        q[o].time > i && q[o].name === e && (i = q[o].time);
      if ((a - i < s && (r = !1), r)) {
        var n = playSound(e, t, !1);
        n.once("play", function (t) {
          var s = { time: a, id: t, name: e };
          q.push(s);
        }),
          n.once("end", function (e) {
            for (var t = 0; t < q.lenght; t++) {
              if (q[t].id === e) {
                q.splice(t, 1);
                break;
              }
            }
          });
      }
      return r;
    }),
    (this._onBallInHole = function (e) {
      s_iGameMode == GAME_MODE_TIME
        ? 0 != e.getNumber()
          ? (9 == e.getNumber()
              ? (c += 3 * POINTS_FOR_BALL_POT)
              : (c += POINTS_FOR_BALL_POT),
            s_oInterface.updateScore(c),
            14 == P.length ? (a = !0) : (A++, P.push(e.getNumber())),
            f.push(e.getNumber()))
          : c > POINTS_FOR_BALL_POT &&
            ((c -= POINTS_FOR_BALL_POT), s_oInterface.updateScore(c))
        : 0 !== e.getNumber()
        ? (A++, P.push(e.getNumber()), f.push(e.getNumber()))
        : (n = !0);
      var t = e.getCurForceLen(),
        s = linearFunction(t, 0.1, 40, 0.2, 1);
      if ((playSound("ball_in_hole", s, !1), 0 !== e.getNumber())) {
        var t = e.getCurForceLen(),
          r = linearFunction(t, 0, 13, 700, 100);
        e.fadeAnimInHole(r);
      }
      var i = U.getEdgeCollisionCount(),
        o = e.getEdgeCollisionCount() + i;
      (o = o <= 0 ? 1 : o), (c += POINTS_FOR_BALL_POT * o * h), h++;
    }),
    (this._onCollisionBallWithEdge = function (e, t = null) {
      var s = e.getCurForceLen();
      if (0 !== s) {
        var r = linearFunction(s, 0.1, 40, 0.1, 1);
        if ((this._playTableSound("edge_collision", r, 100), t))
          for (var i = t.getID(), a = 0; a < MAIN_TABLE_EDGE.length; a++)
            MAIN_TABLE_EDGE[a] === i && e.increaseEdgeCollisionCount();
      }
    }),
    (this.reset = function () {
      (s = !1),
        (r = !1),
        (n = !1),
        (a = !1),
        (o = !0),
        (d = 0),
        (A = 0),
        (J = 0),
        (c = 0),
        (h = 1),
        (g = 1),
        (P = new Array()),
        (f = new Array()),
        (u = new Array()),
        (i = !0),
        (E = [7, 7]),
        (_ = 0);
    }),
    (this.unload = function () {
      y.off("mousedown", p), y.removeAllEventListeners(), (s_oTable = null);
    }),
    (this._initTableEdges = function () {
      B = new Array();
      for (var e = 0; e < FIELD_POINTS.length - 1; e++) {
        t = new CEdge(
          FIELD_POINTS[e].x,
          FIELD_POINTS[e].y,
          FIELD_POINTS[e + 1].x,
          FIELD_POINTS[e + 1].y,
          e
        );
        B.push(t);
      }
      var t = new CEdge(
        FIELD_POINTS[FIELD_POINTS.length - 1].x,
        FIELD_POINTS[FIELD_POINTS.length - 1].y,
        FIELD_POINTS[0].x,
        FIELD_POINTS[0].y,
        FIELD_POINTS.length - 1
      );
      B.push(t);
    }),
    (this.renderEdges = function () {
      for (var e = 0; e < B.length; e++) B[e].render(k);
    }),
    (this.initBalls = function () {
      (X = new createjs.Container()),
        H.addChild(X),
        (L = new Array()),
        (U = new CBall(0, X, s_oTextureLibrary.cue_ball)).setPos(
          CUE_BALL_POS.x,
          CUE_BALL_POS.y
        ),
        (L[0] = U);
      for (var e = 1; e < BALL_NUMBER + 1; e++) {
        var t = s_oTextureLibrary["ball_" + e],
          s = new CBall(e, X, t);
        (L[e] = s), L[e].setFlagOnTable(!0);
      }
      this.setInitBallsPosition(), (P = new Array());
    }),
    (this.setFirstBallCollision = function (e) {
      u.push(e);
    }),
    (this.setInitBallsPosition = function () {
      switch (s_iGameMode) {
        case GAME_MODE_NINE:
          for (
            var e = new Array(1, 2, 3, 5, 6, 7, 8), t = 2;
            t < BALL_NUMBER;
            t++
          ) {
            a = Math.floor(Math.random() * e.length);
            L[t].setPos(RACK_POS[e[a]].x, RACK_POS[e[a]].y), e.splice(a, 1);
          }
          L[0].setPos(CUE_BALL_POS.x, CUE_BALL_POS.y),
            L[1].setPos(RACK_POS[0].x, RACK_POS[0].y),
            L[9].setPos(RACK_POS[4].x, RACK_POS[4].y);
          break;
        case GAME_MODE_EIGHT:
          for (
            var s = new Array(0, 1, 2, 3, 5, 6, 7, 8, 9, 11, 12, 13),
              r = Math.floor(7 * Math.random()) + 9,
              i = Math.floor(7 * Math.random()) + 1,
              t = 1;
            t < BALL_NUMBER + 1;
            t++
          )
            if (8 != t && t != r && t != i) {
              a = Math.floor(Math.random() * s.length);
              L[t].setPos(RACK_POS[s[a]].x, RACK_POS[s[a]].y), s.splice(a, 1);
            }
          L[r].setPos(RACK_POS[10].x, RACK_POS[10].y),
            L[i].setPos(RACK_POS[14].x, RACK_POS[14].y),
            L[8].setPos(RACK_POS[4].x, RACK_POS[4].y);
          break;
        case GAME_MODE_TIME:
          for (
            var e = new Array(0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14),
              t = 1;
            t < BALL_NUMBER;
            t++
          )
            if (9 !== t) {
              var a = Math.floor(Math.random() * e.length);
              L[t].setPos(RACK_POS[e[a]].x, RACK_POS[e[a]].y), e.splice(a, 1);
            }
          L[0].setPos(CUE_BALL_POS.x, CUE_BALL_POS.y),
            L[9].setPos(RACK_POS[4].x, RACK_POS[4].y);
      }
      L.forEach(function (e) {
        this._update3DObjectTransformation(e);
      }, this);
    }),
    (this.initStick = function () {
      (I = new CVector2()).set(-1, 0),
        (N = new CVector2(1, 0)),
        (v = new CVector2()),
        (m = new CVector2());
    }),
    (this.hitBall = function () {
      (_ *= 0.2), N.scalarProduct(_), U.addForce(N);
    }),
    (this.startToShot = function () {
      F.hide(), (l = STATE_TABLE_MOVE_STICK), (s = !0);
    }),
    (this._onPressHitArea = function (e) {
      if (
        U.isBallOnTable() &&
        s_oGame.getCurTurn() == userTurnID &&
        w.areBallsStopped() &&
        !r
      ) {
        s_bMobile || s_oTable.startToShot(), U.setDragging(!1);
        var t = H.globalToLocal(s_oStage.mouseX, s_oStage.mouseY);
        v.set(t.x, t.y),
          (K = radiantsToDegrees(
            Math.atan2(U.getPos().getY() - t.y, U.getPos().getX() - t.x)
          )) < 0
            ? (K += 360)
            : K > 360 && (K -= 360),
          s_bMobile && (b = y.on("pressmove", s_oTable._onPressMoveHitArea)),
          (R = y.on("pressup", s_oTable._onReleaseHitArea));
      }
    }),
    (this._onPressMoveHitArea = function (e) {
      var t = H.globalToLocal(e.stageX, e.stageY),
        s = radiantsToDegrees(
          Math.atan2(U.getPos().getY() - t.y, U.getPos().getX() - t.x)
        );
      s < 0 ? (s += 360) : s > 360 && (s -= 360);
      var r = s - K;
      s_oTable.rotateStick(-r), (K = s);
    }),
    (this.startStickAnimation = function () {
      return s_oTable._moveStick();
    }),
    (this._moveStick = function (e, t) {
      s = !1;
      var a = _ >= MIN_POWER_SHOT;
      return (
        a
          ? ((i = !1),
            (r = !0),
            U.setSideEffect(s_oInterface.getSideSpin()),
            this.sendShootPacketInfo())
          : ((l = j) !== STATE_TABLE_PLACE_CUE_BALL &&
              l !== STATE_TABLE_PLACE_CUE_BALL_BREAKSHOT) ||
            F.show(),
        a
      );
    }),
    (this._onReleaseHitArea = function () {
      if ((y.off("pressmove", b), y.off("pressup", R), !s_bMobile))
        switch (l) {
          case STATE_TABLE_MOVE_STICK:
            s_oTable._moveStick({ x: s_oStage.mouseX, y: s_oStage.mouseY }, v);
        }
    }),
    (this._onPressDownCueBall = function (e) {
      s_oGame.getCurTurn() != userTurnID ||
        (l !== STATE_TABLE_PLACE_CUE_BALL_BREAKSHOT &&
          l !== STATE_TABLE_PLACE_CUE_BALL) ||
        (U.addEventListener(ON_PRESS_MOVE_BALL, this._onPressMoveCueBall, this),
        U.addEventListener(ON_PRESS_UP_BALL, this._onPressUpCueBall, this),
        U.setFlagOnTable(!1),
        Y.setVisible(!0),
        F.setPos(U.getX(), U.getY()));
    }),
    (this._onPressMoveCueBall = function (e) {
      var t = { x: e.stageX, y: e.stageY };
      this._moveCueBall(t),
        this.updateStick(),
        this.renderStickDirection(),
        this._checkCueBallCollisionWithTableElements()
          ? (s_oGame.hideShotBar(), (z = ON_CUE_NOT_PLACEABLE))
          : (s_oGame.showShotBar(), (z = ON_CUE_PLACEABLE)),
        F.setPos(U.getX(), U.getY());
    }),
    (this._onPressUpCueBall = function () {
      U.removeEventListener(ON_PRESS_MOVE_BALL),
        U.removeEventListener(ON_PRESS_UP_BALL),
        this._placeCueBall(),
        this.updateStick(),
        this.renderStickDirection(),
        F.setPos(U.getX(), U.getY());
      var e = {};
      (e.x = U.getX()),
        (e.y = U.getY()),
        netManager.sendPacket("CueBallPos", e);
    }),
    (this._checkCueBallCollisionWithTableElements = function () {
      if (
        U.getX() > CUE_BALL_RESPOT_1.x &&
        U.getX() < CUE_BALL_RESPOT_3.x &&
        U.getY() > CUE_BALL_RESPOT_1.y &&
        U.getY() < CUE_BALL_RESPOT_3.y
      ) {
        var e = new CVector2();
        e.set(U.getX(), U.getY());
        for (var t = 1; t < BALL_NUMBER + 1; t++) {
          if (distance2(e, L[t].getPos()) <= BALL_DIAMETER_QUADRO) return !0;
        }
      }
      return !1;
    }),
    (this._placeCueBall = function () {
      this._checkCueBallCollisionWithTableElements() ||
        ((k.visible = !0),
        (W.visible = !1),
        U.setDragging(!1),
        U.setFlagOnTable(!0));
    }),
    (this._moveCueBall = function (e) {
      var t = H.globalToLocal(e.x, e.y);
      t.y - BALL_RADIUS > FIELD_POINTS[1].y &&
        t.y + BALL_RADIUS < FIELD_POINTS[13].y &&
        U.setY(t.y),
        l === STATE_TABLE_PLACE_CUE_BALL &&
          t.x + BALL_RADIUS < FIELD_POINTS[9].x &&
          t.x - BALL_RADIUS > FIELD_POINTS[21].x &&
          U.setX(t.x);
    }),
    (this._checkCpuBallCollision = function (e, t, s, r, i) {
      var a = new CVector2(),
        o = new CVector2(),
        n = new CVector2();
      n.setV(e), n.subtract(t);
      var l = n.length();
      n.normalize(),
        a.setV(n),
        o.setV(n),
        a.rot90CCW(),
        o.rot90CW(),
        a.scalarProduct(BALL_RADIUS),
        o.scalarProduct(BALL_RADIUS),
        a.add(t),
        o.add(t);
      var _ = new CVector2(),
        g = new CVector2();
      _.setV(n),
        g.setV(n),
        _.scalarProduct(l),
        g.scalarProduct(l),
        _.add(a),
        g.add(o);
      var c = new CEdge();
      c.set(o.getX(), o.getY(), g.getX(), g.getY());
      var h = new CEdge();
      h.set(a.getX(), a.getY(), _.getX(), _.getY());
      for (
        var E = !1, u = { iDistance: 0, vClosestPoint: new CVector2() }, T = 0;
        T < BALL_NUMBER + 1;
        T++
      )
        T != s &&
          T != r &&
          (collideEdgeWithCircle(c, L[T].getPos(), BALL_RADIUS, u) &&
            ((E = !0), i.push({ ball: L[T], point: u.vClosestPoint })),
          collideEdgeWithCircle(h, L[T].getPos(), BALL_RADIUS, u) &&
            ((E = !0), i.push({ ball: L[T], point: u.vClosestPoint })));
      return E;
    }),
    (this.renderStickDirection = function () {
      if (
        (M.graphics.clear(),
        V.graphics.clear(),
        D.graphics.clear(),
        (G.x = CANVAS_WIDTH + 100),
        (G.y = CANVAS_HEIGHT + 100),
        !1 === s)
      )
        if (r) {
          var e = new CVector2(),
            t = new CVector2();
          t.set(Y.getX(), Y.getY());
          var i;
          if (
            ((d += s_iTimeElaps),
            _ > 100
              ? (i = easeElasticIn(d, 0, 1, TIME_ANIMATION_SHOT_ELASTIC, -1))
              : ((i = easeBackIn(d, 0, 1, TIME_ANIMATION_SHOT_BACK)),
                _ < MIN_POWER_SHOT && (_ = MIN_POWER_SHOT)),
            (e = tweenVectors(t, U.getPos(), e, i)),
            d >= O)
          ) {
            s_oGame.hideShotBar();
            var a = linearFunction(_, MIN_POWER_SHOT, MAX_POWER_SHOT, 0.3, 1);
            playSound("stick_shot", a, !1),
              (d = 0),
              (r = !1),
              (_ *= 0.2),
              N.scalarProduct(_),
              U.addForce(N),
              N.normalize();
            var o = s_oInterface.getSideSpin() * (0.5 * Math.sign(N.getX())),
              n = s_oInterface.getBackSpin() * (0.5 * Math.sign(N.getY())),
              g = o + n * N.getX(),
              c = n - g * Math.sign(N.getX());
            U.setEffectForceX(-g), U.setEffectForceY(-c);
            U.getEffectForceVector().add(N),
              Y.setVisible(!1),
              (l = STATE_TABLE_SHOOTING);
          }
          Y.setPos(e.getX(), e.getY());
        } else {
          var h = new Array(),
            E = new CVector2(),
            u = {
              x: 1280 * N.getX() + U.getX(),
              y: 1280 * N.getY() + U.getY(),
            };
          E.set(u.x, u.y);
          var T = new CVector2();
          T.setV(E), T.subtract(U.getPos()), T.normalize();
          this._checkCpuBallCollision(E, U.getPos(), 0, 0, h);
          for (var C = 0; C < h.length; C++)
            h[C].ball.isBallOnTable() || (h.splice(C, 1), C--);
          if (h.length > 0) {
            for (
              var A = distance(U.getPos(), h[0].ball.getPos()), L = 0, P = 1;
              P < h.length;
              P++
            )
              if (h[P].ball.isBallOnTable()) {
                var f = distance(U.getPos(), h[P].ball.getPos());
                f < A && ((A = f), (L = P));
              }
            new CEdge().set(U.getX(), U.getY(), E.getX(), E.getY());
            (k = new CVector2()).setV(T), k.scalarProduct(1.5);
            var v = new CVector2();
            for (
              v.setV(U.getPos());
              distance(v, h[L].ball.getPos()) > BALL_DIAMETER + 1;

            )
              v.add(k);
            var p = new CVector2();
            p.setV(h[L].ball.getPos()), p.subtract(v), p.normalize();
            var b = new CVector2();
            p.invert(),
              (b = reflectVectorV2(p, T)).normalize(),
              b.scalarProduct(48);
            var R = new CVector2();
            R.setV(v), R.add(b);
            var w = new CVector2();
            w.setV(h[L].ball.getPos()),
              w.subtract(v),
              w.normalize(),
              w.scalarProduct(72);
            var y = new CVector2();
            y.setV(v),
              y.add(w),
              (G.visible = !0),
              (G.x = v.getX()),
              (G.y = v.getY()),
              M.graphics
                .setStrokeStyle(4)
                .beginStroke(PREVISION_TRAJECTORY_COLORS[0][z])
                .moveTo(U.getX(), U.getY())
                .lineTo(v.getX(), v.getY()),
              V.graphics
                .setStrokeStyle(4)
                .beginStroke(PREVISION_TRAJECTORY_COLORS[0][z])
                .moveTo(v.getX(), v.getY())
                .lineTo(R.getX(), R.getY()),
              D.graphics
                .setStrokeStyle(4)
                .beginStroke(PREVISION_TRAJECTORY_COLORS[1][z])
                .moveTo(v.getX(), v.getY())
                .lineTo(y.getX(), y.getY());
          } else {
            new CEdge().set(U.getX(), U.getY(), E.getX(), E.getY());
            var X = new CEdge();
            if (
              null !==
              (X = (function (e, t, s) {
                var r = new CVector2(),
                  i = new CVector2(),
                  a = new CVector2();
                a.setV(e), a.subtract(t);
                var o = a.length();
                a.normalize(),
                  r.setV(a),
                  i.setV(a),
                  r.rot90CCW(),
                  i.rot90CW(),
                  r.scalarProduct(BALL_RADIUS),
                  i.scalarProduct(BALL_RADIUS),
                  r.add(t),
                  i.add(t);
                var n = new CVector2(),
                  l = new CVector2();
                n.setV(a),
                  l.setV(a),
                  n.scalarProduct(o),
                  l.scalarProduct(o),
                  n.add(r),
                  l.add(i);
                var _ = new CEdge();
                _.set(i.getX(), i.getY(), l.getX(), l.getY());
                var g = new CEdge();
                g.set(r.getX(), r.getY(), n.getX(), n.getY());
                for (var c = new CEdge(), h = !1, E = 0; E < s.length; E++) {
                  if (collideEdgeWithEdge(_, s[E])) {
                    (c = s[E]), (h = !0);
                    break;
                  }
                  if (collideEdgeWithEdge(g, s[E])) {
                    (c = s[E]), (h = !0);
                    break;
                  }
                }
                return h ? c : null;
              })(E, U.getPos(), B))
            ) {
              var H = new CVector2(),
                k = new CVector2();
              for (
                k.setV(T), k.scalarProduct(2), H.setV(U.getPos());
                !collideEdgeWithCircle(X, H, BALL_RADIUS);

              )
                H.add(k);
              (G.visible = !0),
                (G.x = H.getX()),
                (G.y = H.getY()),
                M.graphics
                  .beginStroke(PREVISION_TRAJECTORY_COLORS[0][z])
                  .moveTo(U.getX(), U.getY())
                  .lineTo(H.getX(), H.getY());
            } else
              (G.visible = !1),
                M.graphics
                  .beginStroke(PREVISION_TRAJECTORY_COLORS[0][z])
                  .moveTo(U.getX(), U.getY())
                  .lineTo(U.getX() + N.getX() * S, U.getY() + N.getY() * S);
          }
          Y.setPos(U.getX(), U.getY());
          var W = toDegree(angleBetweenVectors(I, N));
          (u = { x: 1280 * N.getX() + U.getX(), y: 1280 * N.getY() + U.getY() })
            .y > U.getY() && (W = 180 - W + 180),
            Y.setRotation(W + 180);
        }
      else Y.setPos(U.getX() + m.getX() * _, U.getY() + m.getY() * _);
    }),
    (this.updateStick = function () {
      var e = new CVector2(),
        t = H.globalToLocal(s_oStage.mouseX, s_oStage.mouseY);
      if ((e.set(t.x, t.y), !1 === s))
        if (!0 === r) (d += s_iTimeElaps) > O && (d = O);
        else {
          var i = !s_bMobile && U.isBallOnTable();
          i && (N.setV(e), N.subtract(U.getPos())),
            (S = N.length()),
            i && N.normalize(),
            m.setV(N),
            m.invert();
        }
      else if (!s_bMobile) {
        e.subtract(v);
        var a = e.length();
        this.holdShotStickMovement(a);
      }
    }),
    (this.holdShotStickMovement = function (e) {
      (_ = e) > MAX_POWER_SHOT && (_ = MAX_POWER_SHOT),
        (O = _ > 100 ? TIME_ANIMATION_SHOT_ELASTIC : TIME_ANIMATION_SHOT_BACK);
    }),
    (this.renderBalls = function () {
      for (var e = 0; e < L.length; e++)
        s_oGame.getCurTurn() != userTurnID ? L[e].render(!0) : L[e].render(!1);
    }),
    (this.respotCueBall = function () {
      U.setDragging(!0),
        (l = STATE_TABLE_PLACE_CUE_BALL),
        (k.visible = !1),
        (W.visible = !0),
        s_oGame.getCurTurn() == userTurnID &&
          ((j = l),
          U.setPos(CUE_BALL_POS.x, CUE_BALL_POS.y),
          Y.setVisible(!0),
          F.setPos(U.getX(), U.getY(0)),
          F.show());
    }),
    (this.rotateStick = function (e) {
      l === STATE_TABLE_SHOOT ||
        l === STATE_TABLE_SHOOTING ||
        s_oGame.getCurTurn() != userTurnID ||
        r ||
        (rotateVector2D(toRadian(e), N),
        this.updateStick(),
        this.renderStickDirection());
    }),
    (this.checkTurn = function () {
      var e = !1,
        t = !1;
      switch (s_iGameMode) {
        case GAME_MODE_NINE:
          var s = u[0];
          if (u.length > 0 && s.getNumber() === g) {
            if (n) {
              if (
                ((n = !1),
                s_oGame.changeTurn(),
                this.respotCueBall(),
                !1 === L[9].isBallOnTable())
              ) {
                for (var r = !1, i = 0; !r; ) {
                  L[9].setPos(RACK_POS[4].x + i, RACK_POS[4].y), (r = !0);
                  for (_ = 0; _ < 8; _++) {
                    if (
                      (A = distance2(L[9].getPos(), L[_].getPos())) <=
                      BALL_DIAMETER_QUADRO
                    ) {
                      r = !1;
                      break;
                    }
                    i += BALL_RADIUS;
                  }
                }
                L[9].setFlagOnTable(!0), L[9].setVisible(!0);
              }
            } else if (f.length > 0) {
              for (O = 0; O < f.length; O++)
                if (9 == f[O])
                  return (
                    (a = !0),
                    L[9].setVisible(!0),
                    void (s_iPlayerMode == GAME_MODE_CPU
                      ? 2 == s_oGame.getCurTurn()
                        ? (T[ON_END_GAME] && T[ON_LOST].call(C[ON_LOST]),
                          s_oGame.resetWinStreak())
                        : (T[ON_WON] && T[ON_WON].call(C[ON_WON], "YOU"),
                          s_oGame.increaseWinStreak())
                      : 1 == s_oGame.getCurTurn()
                      ? T[ON_WON] &&
                        T[ON_WON].call(C[ON_WON], s_oGame.getPlayer1Name())
                      : T[ON_WON] &&
                        T[ON_WON].call(C[ON_WON], s_oGame.getPlayer2Name()))
                  );
              Y.setVisible(!0);
            } else s_oGame.changeTurn(), Y.setVisible(!0);
            o = !1;
          } else {
            if (o)
              U.setPos(CUE_BALL_POS.x, CUE_BALL_POS.y),
                s_oGame.changeTurn(),
                this.targetting(!0);
            else {
              if (0 == L[9].isBallOnTable()) {
                for (var r = !1, i = 0; !r; ) {
                  L[9].setPos(RACK_POS[4].x + i, RACK_POS[4].y), (r = !0);
                  for (var _ = 0; _ < 8; _++) {
                    var A = distance2(L[9].getPos(), L[_].getPos());
                    if (A <= BALL_DIAMETER_QUADRO) {
                      r = !1;
                      break;
                    }
                    i += BALL_RADIUS;
                  }
                }
                L[9].setFlagOnTable(!0), L[9].setVisible(!0);
              }
              s_oGame.changeTurn(), this.respotCueBall(), (o = !1);
            }
            n = !1;
          }
          u.splice(0), f.splice(0);
          break;
        case GAME_MODE_EIGHT:
          if (!1 === L[8].isBallOnTable()) {
            if (0 === E[s_oGame.getCurTurn() - 1])
              if (((t = !0), s_iPlayerMode == GAME_MODE_CPU)) {
                // if (2 == s_oGame.getCurTurn()) {
                if (s_oGame.getCurTurnID() != s_oGame.getCurTurn()) {
                  if (T[ON_LOST]) {
                    T[ON_LOST].call(C[ON_LOST], TEXT_GAME_OVER, c);
                    window.top.postMessage(
                      {
                        name: "gameendstatus",
                        flag: false,
                        cid: localStorage.getItem("poolgameid"),
                        uid: localStorage.getItem("userIDForGame"),
                        result: "lost",
                      },
                      "*"
                    );
                  }
                  s_oGame.resetWinStreak();
                } else {
                  if (T[ON_WON]) {
                    T[ON_WON].call(C[ON_WON], TEXT_YOU_WON, c);
                    window.top.postMessage(
                      {
                        name: "gameendstatus",
                        flag: true,
                        cid: localStorage.getItem("poolgameid"),
                        uid: localStorage.getItem("userIDForGame"),
                        result: "won",
                      },
                      "*"
                    );
                  }
                  s_oGame.increaseWinStreak();
                }
              } else {
                1 === s_oGame.getCurTurn()
                  ? T[ON_WON] &&
                    T[ON_WON].call(
                      C[ON_WON],
                      sprintf(TEXT_PLAYER_NAME_WON, s_oGame.getPlayer1Name()),
                      c
                    )
                  : T[ON_WON] &&
                    T[ON_WON].call(
                      C[ON_WON],
                      sprintf(TEXT_PLAYER_NAME_WON, s_oGame.getPlayer2Name()),
                      c
                    );
              }
            else if (s_iPlayerMode == GAME_MODE_CPU) {
              // if (2 == s_oGame.getCurTurn()) {

              if (s_oGame.getCurTurnID() != s_oGame.getCurTurn()) {
                if (T[ON_WON]) {
                  T[ON_WON].call(C[ON_WON], TEXT_YOU_WON, c);
                  window.top.postMessage(
                    {
                      name: "gameendstatus",
                      flag: true,
                      cid: localStorage.getItem("poolgameid"),
                      uid: localStorage.getItem("userIDForGame"),
                      result: "won",
                    },
                    "*"
                  );
                }
                s_oGame.increaseWinStreak();
              } else {
                if (T[ON_LOST]) {
                  T[ON_LOST].call(C[ON_LOST], TEXT_GAME_OVER, c);
                  window.top.postMessage(
                    {
                      name: "gameendstatus",
                      flag: false,
                      cid: localStorage.getItem("poolgameid"),
                      uid: localStorage.getItem("userIDForGame"),
                      result: "lost",
                    },
                    "*"
                  );
                }
                s_oGame.resetWinStreak();
              }
            } else {
              1 == s_oGame.getCurTurn()
                ? T[ON_WON] &&
                  T[ON_WON].call(
                    C[ON_WON],
                    sprintf(TEXT_PLAYER_NAME_WON, s_oGame.getPlayer2Name()),
                    c
                  )
                : T[ON_WON] &&
                  T[ON_WON].call(
                    C[ON_WON],
                    sprintf(TEXT_PLAYER_NAME_WON, s_oGame.getPlayer1Name()),
                    c
                  );
            }
            return;
          }
          if (n) {
            (n = !1),
              s_oGame.changeTurn(!0),
              (e = !0),
              !0,
              this._assignSuit(),
              this.respotCueBall();
            for (O = 0; O < f.length; O++)
              s_oGame.isLegalShotFor8Ball(f[O])
                ? E[s_oGame.getCurTurn() - 1]--
                : E[s_oGame.getNextTurn() - 1]--;
          } else if (
            0 !== u.length &&
            s_oGame.isLegalShotFor8Ball(
              u[0].getNumber(),
              E[s_oGame.getCurTurn() - 1]
            )
          ) {
            if (f.length > 0) {
              gameTimer = 60;
              console.log("f length is good");
              handleTimer = setInterval(() => {
                gameTimer--;
                if (timerEffectText === null) {
                  timerEffectText = new CEffectText(
                    gameTimer,
                    s_oStageUpper3D,
                    FX_TOPBlink
                  );
                } else {
                  timerEffectText.setText(gameTimer);
                }
                console.log(gameTimer, "----------");

                if (gameTimer <= 0) {
                  clearInterval(handleTimer);
                  s_oGame.changeTurn(!0);
                  s_oGame.hideShotBar(),
                    s_oTable.hideStick(),
                    s_oTable.hideHandCueBallDrag();
                }
              }, 1000);
              if (this._assignSuit())
                0 == E[s_oGame.getCurTurn() - 1] && s_oGame.setNextBallToHit(8),
                  Y.setVisible(s_oGame.getCurTurn() === userTurnID);
              else if (s_oGame.isLegalShotFor8Ball(f[0])) {
                var d = !0;
                if ((E[s_oGame.getCurTurn() - 1]--, f.length > 1)) {
                  for (O = 1; O < f.length; O++)
                    s_oGame.isLegalShotFor8Ball(f[O])
                      ? E[s_oGame.getCurTurn() - 1]--
                      : ((d = !1), E[s_oGame.getNextTurn() - 1]--);
                  0 == E[s_oGame.getCurTurn() - 1] &&
                    s_oGame.setNextBallToHit(8),
                    d,
                    d || (s_oGame.changeTurn(!0), (e = !0));
                }
                0 == E[s_oGame.getCurTurn() - 1] && s_oGame.setNextBallToHit(8),
                  Y.setVisible(s_oGame.getCurTurn() === userTurnID);
              } else {
                s_oGame.changeTurn(!0), (e = !0), !0, this.respotCueBall();
                for (O = 0; O < f.length; O++)
                  s_oGame.isLegalShotFor8Ball(f[O])
                    ? E[s_oGame.getCurTurn() - 1]--
                    : E[s_oGame.getNextTurn() - 1]--;
                0 === E[s_oGame.getCurTurn() - 1] &&
                  s_oGame.setNextBallToHit(8);
              }
            } else {
              playCount = 0;
              s_oGame.changeTurn(!1),
                (e = !0),
                Y.setVisible(s_oGame.getCurTurn() === userTurnID);
            }
          } else {
            for (var O = 0; O < f.length; O++)
              s_oGame.isLegalShotFor8Ball(f[O])
                ? E[s_oGame.getCurTurn() - 1]--
                : E[s_oGame.getNextTurn() - 1]--;
            0 == E[s_oGame.getCurTurn() - 1] && s_oGame.setNextBallToHit(8),
              s_oGame.changeTurn(!0),
              (e = !0),
              !0,
              this.respotCueBall();
          }
          u.splice(0), f.splice(0);
      }
      return (
        U.isDragging() ||
          (s_iPlayerMode === GAME_MODE_CPU
            ? s_oGame.getCurTurn() == userTurnID
              ? (s_bMobile,
                (j = l = STATE_TABLE_MOVE_STICK),
                s_oGame.showShotBar())
              : (l = STATE_TABLE_SHOOT)
            : (s_bMobile,
              (j = l = STATE_TABLE_MOVE_STICK),
              s_oGame.showShotBar())),
        s_oGame.getCurTurn() === userTurnID &&
          (this.updateStick(), this.renderStickDirection()),
        e && ((J = 0), (h = 1)),
        (c = 0),
        t
      );
    }),
    (this.isCpuTurn = function () {
      return s_oGame.getCurTurn() != userTurnID;
    }),
    (this.targetting = function (e) {
      Y.setVisible(e);
    }),
    (this._assignSuit = function () {
      var e = 7 === E[0] && 7 === E[1];
      if (e) {
        for (var t = 0, s = 0, r = 0; r < f.length; r++) f[r] > 8 ? t++ : s++;
        if (t > s) {
          s_oGame.assignSuits(9);
          for (i = 0; i < t; i++) f[s_oGame.getCurTurn() - 1]--;
          for (a = 0; a < s; a++) f[s_oGame.getNextTurn() - 1]--;
        } else {
          s_oGame.assignSuits(1);
          for (var i = 0; i < s; i++) E[s_oGame.getCurTurn() - 1]--;
          for (var a = 0; a < t; a++) E[s_oGame.getNextTurn() - 1]--;
        }
      }
      return e;
    }),
    (this.prepareNextTurn = function () {
      (d = 0), ++J > Q.length - 1 && (J = Q.length - 1);
      this.checkTurn();
      s_iPlayerMode == GAME_MODE_CPU && s_oGame.getCurTurn(), f.splice(0);
    }),
    (this.calculateCpuShot = function () {
      var e = !0;
      switch (s_iGameMode) {
        case GAME_MODE_NINE:
          h = w.getEdges();
          if (
            (null !== (A = this.setHoleToAim(U, L[g], g, h))
              ? ((e = !0),
                U.isDragging() && (e = this.respotCpuCueBall(A.coll)),
                e && !this.findCollisionForCueBall(A.coll) && (e = !1))
              : (e = !1),
            !e)
          )
            for (var t = g + 1; t < BALL_NUMBER + 1; t++) {
              if (null != (A = this.setHoleToAim(L[g], L[t], t, h))) {
                var s = new CVector2();
                if (
                  (s.setV(
                    this.findCollisionPoint(A.coll.getX(), A.coll.getY(), L[g])
                  ),
                  (e = !U.isDragging() || this.respotCpuCueBall(s)))
                ) {
                  if (this.findCollisionForCueBall(s)) {
                    e = !0;
                    break;
                  }
                  e = !1;
                }
              } else e = !1;
            }
          if (!e) {
            var r = new Array(),
              i = new Array(),
              a = new Array();
            r = this.setAllHolesToAim(U, L[g], g, h);
            for (var o = new CVector2(), n = 0; n < r.length; n++) {
              i[n] = r[n].dist;
              (O = new CVector2()).setV(r[n].coll),
                (e = !0),
                U.isDragging() && (e = this.respotCpuCueBall(O)),
                e &&
                  (o.set(0, -1),
                  (a[n] = this._getEdgeShot(O, o, h)),
                  void 0 === a[n]
                    ? ((i[n] += 9e3), (e = !1))
                    : ((i[n] += a[n].dist), (e = !0)));
            }
            if (e) {
              for (var l = i[0], _ = 0, c = 1; c < i.length; c++)
                i[c] < l && ((l = i[c]), (_ = c));
              this.cpuShot(a[_].dir);
            } else {
              (m = new CVector2()).setV(L[g].getPos()),
                m.subtract(U.getPos()),
                m.normalize(),
                U.isDragging() && U.setPos(CUE_BALL_POS.x, CUE_BALL_POS.y),
                this.cpuShot(m);
            }
          }
          break;
        case GAME_MODE_EIGHT:
          e = !1;
          var h = w.getEdges();
          if (0 === E[s_oGame.getCurTurn() - 1]) {
            if (
              (null !== (A = this.setHoleToAim(L[0], L[8], 8, h))
                ? ((e = !0),
                  L[0].isDragging() && (e = this.respotCpuCueBall(A.coll, 8)),
                  e &&
                    !this.findCollisionForCueBall(
                      A.coll,
                      L[8],
                      new CVector2(A.hole.x, A.hole.y)
                    ) &&
                    (e = !1))
                : (e = !1),
              !e)
            ) {
              var r = new Array(),
                i = new Array(),
                a = new Array();
              r = this.setAllHolesToAim(L[0], L[8], 8, h);
              for (var o = new CVector2(), n = 0; n < r.length; n++) {
                i[n] = r[n].dist;
                (O = new CVector2()).setV(r[n].coll),
                  (e = !U.isDragging() || this.respotCpuCueBall(O, 8)) &&
                    (e = this.prepareEdgeShot(n, O, o, h, i));
              }
              if (!e) {
                (m = new CVector2()).setV(L[8].getPos()),
                  m.subtract(L[0].getPos()),
                  m.normalize(),
                  L[0].isDragging() &&
                    L[0].setPos(CUE_BALL_POS.x, CUE_BALL_POS.y),
                  this.cpuShot(m);
              }
            }
          } else {
            var u = 1,
              T = BALL_NUMBER + 1,
              C = new Array();
            s_oGame.isSuiteAssigned() &&
              ("solid" == s_oGame.getSuiteForCurPlayer()
                ? ((u = 1), (T = 9))
                : ((u = 9), (T = 16)));
            for (P = u; P < T; P++)
              8 !== P && L[P].isBallOnTable() && C.push(L[P]);
            for (n = 0; n < C.length; n++) {
              var A = this.setHoleToAim(L[0], C[n], C[n].getNumber(), B);
              if (null !== A) {
                if (((e = !0), DEBUG_SHOW_CPU_BALL_TRAJECTORY)) {
                  console.log("palla : " + C[n].getNumber()),
                    console.log(A),
                    console.log("*********");
                  var d = { x: A.coll.getX(), y: A.coll.getY() };
                  H.addChild(createGraphicCircle(d, 6, 1e4, "#fff")),
                    H.addChild(createGraphicLine(d, A.hole, 3, 1e4, "#fff"));
                }
                if (
                  (U.isDragging() &&
                    (e = this.respotCpuCueBall(A.coll, C[n].getNumber())),
                  !e ||
                    this.findCollisionForCueBall(
                      A.coll,
                      C[n],
                      new CVector2(A.hole.x, A.hole.y)
                    ))
                )
                  break;
                e = !1;
              } else e = !1;
            }
            if (!e)
              for (P = 0; P < C.length; P++) {
                var r = new Array(),
                  i = new Array();
                r = this.setAllHolesToAim(U, C[P], P, h);
                for (var o = new CVector2(), n = 0; n < r.length; n++) {
                  i[n] = r[n].dist;
                  var O = new CVector2();
                  O.setV(r[n].coll),
                    (e =
                      !U.isDragging() ||
                      this.respotCpuCueBall(O, C[P].getNumber())) &&
                      (e = this.prepareEdgeShot(n, O, o, h, i));
                }
              }
            if (!e) {
              for (var S, P = u; P < T; P++)
                if (
                  (8 !== P || 0 === E[s_oGame.getCurTurn() - 1]) &&
                  L[P].isBallOnTable()
                ) {
                  var f = !1,
                    N = new CEdge();
                  N.set(U.getX(), U.getY(), L[P].getX(), L[P].getY()),
                    (S = L[P]);
                  for (var v = 1; v < BALL_NUMBER + 1; v++)
                    if (
                      v !== P &&
                      collideEdgeWithCircle(N, L[v].getPos(), BALL_DIAMETER)
                    ) {
                      f = !0;
                      break;
                    }
                  if (!f) break;
                }
              var m = new CVector2();
              m.setV(S.getPos()),
                m.subtract(U.getPos()),
                m.normalize(),
                U.isDragging() && U.setPos(CUE_BALL_POS.x, CUE_BALL_POS.y),
                this.cpuShot(m);
            }
          }
      }
    }),
    (this.respotCpuCueBall = function (e, t) {
      var s;
      switch (s_iGameMode) {
        case GAME_MODE_NINE:
          s = g;
          break;
        case GAME_MODE_EIGHT:
          s = t;
      }
      var r = new CVector2();
      r.setV(L[s].getPos()),
        r.subtract(e),
        r.normalize(),
        r.invert(),
        r.scalarProduct(2 * BALL_DIAMETER),
        r.add(e);
      for (var i = s + 1; i < L.length; i++) {
        if (distance2(r, L[i].getPos()) <= BALL_DIAMETER_QUADRO) return !1;
      }
      return r.getX() > CUE_BALL_RESPOT_1.x &&
        r.getX() < CUE_BALL_RESPOT_3.x &&
        r.getY() > CUE_BALL_RESPOT_1.y &&
        r.getY() < CUE_BALL_RESPOT_3.y
        ? (U.setPos(r.getX(), r.getY()), U.setDragging(!1), !0)
        : (console.trace("no respotCpuCueBall " + r.getX() + "," + r.getY()),
          !1);
    }),
    (this.findCollisionPoint = function (e, t, s) {
      var r = new CVector2();
      r.set(e, t), r.subtract(s.getPos()), r.normalize(), r.invert();
      var i = new CVector2(),
        a = randomFloatBetween(Q[J].min, Q[J].max);
      return (
        r.scalarProduct(BALL_DIAMETER * a), r.add(s.getPos()), i.setV(r), i
      );
    }),
    (this.cpuShot = function (e, t = MAX_FORCE_PER_DISTANCE) {
      (t = t > MAX_FORCE_PER_DISTANCE ? MAX_FORCE_PER_DISTANCE : t),
        (_ = linearFunction(t, 0, MAX_FORCE_PER_DISTANCE, 3, MAX_POWER_SHOT)),
        N.setV(e),
        (O = _ > 100 ? TIME_ANIMATION_SHOT_ELASTIC : TIME_ANIMATION_SHOT_BACK),
        Y.setPos(L[0].getX(), L[0].getY()),
        (s = !0);
      var i = new CVector2();
      i.setV(N), i.invert(), i.normalize(), i.scalarProduct(Math.floor(_ / 10));
      var a = new CVector2();
      a.set(Y.getX(), Y.getY()), i.add(a);
      var o = toDegree(angleBetweenVectors(I, N));
      e.getY() > 0 && (o = 180 - o + 180),
        Y.setRotation(o + 180),
        Y.setVisible(!0),
        Y.setPos(i.getX(), i.getY()),
        (s = !1),
        (r = !0),
        (l = STATE_TABLE_SHOOT);
    }),
    (this.findCollisionForCueBall = function (e, t, s) {
      if (this._checkCpuBallCollision(e, U.getPos(), 0, 0, new Array()))
        return !1;
      var r = distance(t, s) + distance(t, U.getPos()),
        i = new CVector2();
      return (
        i.setV(e),
        i.subtract(U.getPos()),
        i.scalarProduct(0.3),
        i.normalize(),
        this.cpuShot(i, r),
        !0
      );
    }),
    (this.setAllHolesToAim = function (e, t, s, r) {
      for (var i = new Array(), a = 0; a < HOLE_CPU_POINTS.length; a++) {
        var o = new CEdge();
        o.set(t.getX(), t.getY(), HOLE_CPU_POINTS[a].x, HOLE_CPU_POINTS[a].y);
        for (
          var n = distance(o.getPointA(), o.getPointB()), l = !1, _ = 0;
          _ < BALL_NUMBER + 1;
          _++
        )
          if (
            _ != s &&
            collideEdgeWithCircle(o, L[_].getPos(), BALL_DIAMETER)
          ) {
            l = !0;
            break;
          }
        for (var g = 0; g < r.length; g++)
          if (collideEdgeWithEdge(o, r[g])) {
            l = !0;
            break;
          }
        l ||
          i.push({
            coll: this.findCollisionPoint(
              HOLE_CPU_POINTS[a].x,
              HOLE_CPU_POINTS[a].y,
              t
            ),
            dist: n,
          });
      }
      if (0 === i.length) return [];
      for (var c = i.length, h = 0; c > 0; ) {
        var E = i[h].coll,
          u = !0;
        0 === e.getNumber() &&
          e.isDragging() &&
          (u = this.respotCpuCueBall(E, t.getNumber())),
          !u ||
          this._checkCpuBallCollision(
            E,
            e.getPos(),
            e.getNumber(),
            s,
            new Array()
          )
            ? i.splice(h, 1)
            : h++,
          c--;
      }
      return i;
    }),
    (this.setHoleToAim = function (e, t, s, r) {
      for (var i = new Array(), a = 1.1 * BALL_RADIUS, o = 0; o < 6; o++) {
        var n = new CEdge();
        n.set(t.getX(), t.getY(), HOLE_CPU_POINTS[o].x, HOLE_CPU_POINTS[o].y);
        for (
          var l = distance2(n.getPointA(), n.getPointB()), _ = !1, g = 0;
          g < BALL_NUMBER + 1;
          g++
        )
          if (
            g != s &&
            collideEdgeWithCircle(n, L[g].getPos(), BALL_DIAMETER)
          ) {
            _ = !0;
            break;
          }
        for (var c = 0; c < r.length; c++)
          if (collideEdgeWithEdge(n, r[c])) {
            _ = !0;
            break;
          }
        for (
          var h = lineInterpolate(n, a, 3), r = w.getEdgesByHoleID(o), E = 0;
          E < h.length && !_;
          E++
        )
          for (var u = 0; u < r.length; u++)
            if ((_ = collideEdgeWithCircle(r[u], h[E], a))) {
              DEBUG_SHOW_PREDICT_TRAJECTORY_COLLISION &&
                (H.addChild(
                  createGraphicLine(
                    { x: t.getX(), y: t.getY() },
                    HOLE_CPU_POINTS[o],
                    3,
                    6e3,
                    "#f0f"
                  )
                ),
                H.addChild(
                  createGraphicCircle(
                    { x: h[E].getX(), y: h[E].getY() },
                    a,
                    6e3,
                    "#0ff"
                  )
                ));
              break;
            }
        if (!_) {
          for (
            var T = this.findCollisionPoint(
                HOLE_CPU_POINTS[o].x,
                HOLE_CPU_POINTS[o].y,
                t
              ),
              C = w.getEdgesByHoleID(o),
              A = !1,
              g = 0;
            g < C.length;
            g++
          )
            if (collideEdgeWithCircle(r[g], T, BALL_RADIUS)) {
              A = !0;
              break;
            }
          A
            ? DEBUG_SHOW_PREDICT_TRAJECTORY_COLLISION &&
              H.addChild(
                createGraphicCircle(
                  { x: T.getX(), y: T.getY() },
                  a,
                  6e3,
                  "#0f0"
                )
              )
            : i.push({ hole: HOLE_CPU_POINTS[o], coll: T, dist: l });
        }
      }
      if (0 !== i.length) {
        sortByKey(i, "dist");
        for (var d = i.length, O = 0; d > 0; ) {
          var S = i[O].coll,
            P = !0;
          0 === e.getNumber() &&
            e.isDragging() &&
            (P = this.respotCpuCueBall(S, t.getNumber())),
            !P ||
            this._checkCpuBallCollision(
              S,
              e.getPos(),
              e.getNumber(),
              e.getNumber(),
              new Array()
            )
              ? i.splice(O, 1)
              : O++,
            d--;
        }
        if (0 == i.length) return null;
        return i[0];
      }
      return null;
    }),
    (this._getEdgeShot = function (e, t, s) {
      var r,
        i = new CVector2();
      i.setV(e);
      var a = 1,
        o = new CEdge();
      t.scalarProduct(600);
      for (var n = new Array(); a < 360; ) {
        rotateVector2D(toRadian(1), t);
        var l = new CVector2();
        l.set(i.getX() + t.getX(), i.getY() + t.getY()),
          o.set(e.getX(), e.getY(), l.getX(), l.getY());
        for (var _ = new CVector2(), g = 0; g < s.length; g++)
          if (collideEdgeWithEdge(o, s[g], _)) {
            r = s[g];
            var c = new CVector2();
            c.setV(reflectVectorV2(t, r.getNormal()));
            var h = new CEdge(),
              E = new CVector2();
            E.setV(c), E.add(_), h.set(_.getX(), _.getY(), E.getX(), E.getY());
            var u = distance(_, e);
            if (
              u > BALL_DIAMETER &&
              collideEdgeWithCircle(h, U.getPos(), BALL_RADIUS)
            ) {
              var T = !1;
              if (
                (this._checkCpuBallCollision(_, U.getPos(), 0, 0, new Array())
                  ? (T = !0)
                  : this._checkCpuBallCollision(e, _, 0, 0, new Array()) &&
                    (T = !0),
                !T)
              ) {
                c.invert(), c.normalize();
                var C = new CVector2();
                C.setV(c);
                L = distance(h.getPointA(), h.getPointB());
                n.push({ dir: C, edge: h, dist: L + u });
              }
            }
          }
        a += 1;
      }
      if (0 !== n.length) {
        for (
          var A = closestPointOnLine(
              n[0].edge.getPointA(),
              n[0].edge.getPointB(),
              U.getPos()
            ),
            d = distance(A, U.getPos()),
            O = 0,
            S = 1;
          S < n.length;
          S++
        ) {
          var L,
            A = closestPointOnLine(
              n[S].edge.getPointA(),
              n[S].edge.getPointB(),
              U.getPos()
            );
          d > (L = distance(A, U.getPos())) && ((d = L), (O = S));
        }
        return n[O];
      }
    }),
    (this.prepareEdgeShot = function (e, t, s, r, i) {
      var a = new Array();
      s.set(0, -1);
      var o = !1;
      if (
        ((a[e] = this._getEdgeShot(t, s, r)),
        void 0 == a[e]
          ? ((i[e] += 9e3), (o = !1))
          : ((i[e] += a[e].dist), (o = !0)),
        o)
      )
        this._edgeShot(i, a);
      else if (
        (s.set(1, 0),
        (a[e] = this._getEdgeShot(t, s, r)),
        void 0 === a[e]
          ? ((i[e] += 9e3), (o = !1))
          : ((i[e] += a[e].dist), (o = !0)),
        o)
      )
        this._edgeShot(i, a);
      else {
        if (
          (s.set(0, 1),
          (a[e] = this._getEdgeShot(t, s, r)),
          void 0 == a[e]
            ? ((i[e] += 9e3), (o = !1))
            : ((i[e] += a[e].dist), (o = !0)),
          !o)
        )
          return (
            s.set(-1, 0),
            (a[e] = this._getEdgeShot(t, s, r)),
            void 0 == a[e] ? ((i[e] += 9e3), !1) : ((i[e] += a[e].dist), !0)
          );
        this._edgeShot(i, a);
      }
    }),
    (this._edgeShot = function (e, t) {
      if (void 0 !== t) {
        for (var s = e[0], r = 0, i = 1; i < e.length; i++)
          e[i] < s && ((s = e[i]), (r = i));
        var a = t[r];
        (a = void 0 === a ? void 0 : a.dir), this.cpuShot(a);
      }
    }),
    (this.setLowestBall = function () {
      for (var e = 1; e < L.length; e++)
        if (L[e].isBallOnTable()) {
          g = e;
          break;
        }
    }),
    (this.isBreakShot = function () {
      return i;
    }),
    (this.getCntBallsIntoHoles = function () {
      return A;
    }),
    (this.updatePhysics = function () {
      var e = w.areBallsStopped();
      w.update(L);
      var t = w.areBallsStopped();
      if (!e && t) {
        s_oInterface.resetSpin(), this.prepareNextTurn(), (_ = 0);
        for (var s = 0; s < L.length; s++) L[s].resetEdgeCollisionCount();
      }
    }),
    (this.getTableX = function () {
      return H.x;
    }),
    (this.getTableY = function () {
      return H.y;
    }),
    (this._update3DObjectTransformation = function (e) {
      var t = { x: e.getX(), y: e.getY() },
        s = e.getObject3D();
      (s.position.x = 0.5 * -CANVAS_WIDTH + t.x + this.getTableX()),
        (s.position.y = 0.5 * CANVAS_HEIGHT - t.y - this.getTableY());
      var r = e.getCurForce(),
        i = e.getEffectForceVector(),
        a = new CVector2(r.getX(), r.getY());
      a.add(i);
      var o = 0.04 * a.length();
      a.normalize(),
        i.scalarProduct(DAMPING_BALL_EFFECT),
        s.rotateOnWorldAxis(new THREE.Vector3(a.getY(), a.getX(), 0), o);
    }),
    (this.showStick = function () {
      Y.setVisible(!0);
    }),
    (this.hideStick = function () {
      Y.setVisible(!1);
    }),
    (this.showHandCueBallDrag = function () {
      F.show();
    }),
    (this.hideHandCueBallDrag = function () {
      F.hide();
    }),
    (this.update = function () {
      this.updatePhysics(), this.renderBalls();
      this.isCpuTurn();
      switch (l) {
        case STATE_TABLE_NONE:
          Y.setVisible(!1), F.setVisible(!1);
          break;
        case STATE_TABLE_PLACE_CUE_BALL:
        case STATE_TABLE_PLACE_CUE_BALL_BREAKSHOT:
        case STATE_TABLE_MOVE_STICK:
          netPlayState == NPS_Take_Turn &&
            (Y.setVisible(!0), this.updateStick(), this.renderStickDirection());
          break;
        case STATE_TABLE_SHOOT:
          s_oGame.getCurTurn() != userTurnID &&
            r &&
            (Y.setVisible(!0), this.renderStickDirection());
          break;
        case STATE_TABLE_SHOOTING:
      }
      L.forEach(function (e) {
        this._update3DObjectTransformation(e), e._updateShadow();
      }, this);
    }),
    (this.resetBallPos = function (e) {
      for (var t = 1; t < BALL_NUMBER + 1; t++) L[t].setPos(e[t].x, e[t].y);
      L.forEach(function (e) {
        this._update3DObjectTransformation(e);
      }, this);
    }),
    (this.AddAllEventListeners = function () {
      (j = l = STATE_TABLE_PLACE_CUE_BALL_BREAKSHOT),
        (p = y.on("mousedown", this._onPressHitArea)),
        U.enableEvents(),
        U.addEventListener(ON_PRESS_DOWN_BALL, this._onPressDownCueBall, this),
        w.addEventListener(ON_BALL_INTO_HOLE, this._onBallInHole, this),
        w.addEventListener(
          ON_BALL_WITH_BALL,
          this._onCollisionBallWithBall,
          this
        ),
        w.addEventListener(
          ON_BALL_WITH_BANK,
          this._onCollisionBallWithEdge,
          this
        );
    }),
    (this.sendShootPacketInfo = function () {
      var e = {};
      (e.dirX = N.getX()),
        (e.dirY = N.getY()),
        (e.stickX = Y.getX()),
        (e.stickY = Y.getY()),
        (e.spin = s_oInterface.getSideSpin()),
        (e.power = _),
        (e.animTime = d),
        netManager.sendPacket("Req_Shoot", e),
        netManager.sendPacket("req_clear_Timer", null);
    }),
    (this.remoteShoot = function (e) {
      N.set(e.dirX, e.dirY),
        Y.setPos(e.posX, e.posY),
        U.setSideEffect(e.spin),
        (_ = e.power),
        (O = _ > 100 ? TIME_ANIMATION_SHOT_ELASTIC : TIME_ANIMATION_SHOT_BACK),
        (d = O / 2),
        (l = STATE_TABLE_SHOOT),
        Y.setPos(L[0].getX(), L[0].getY()),
        (s = !0);
      var t = new CVector2();
      t.setV(N), t.invert(), t.normalize(), t.scalarProduct(Math.floor(_ / 10));
      var i = new CVector2();
      i.set(Y.getX(), Y.getY()), t.add(i);
      var a = toDegree(angleBetweenVectors(I, N));
      N.getY() < 0 ? Y.setRotation(a + 180) : Y.setRotation(180 - a),
        Y.setVisible(!0),
        Y.setPos(t.getX(), t.getY()),
        (s = !1),
        (r = !0),
        (l = STATE_TABLE_SHOOT);
    }),
    (this.setCueBallPos = function (e) {
      U.setPos(e.x, e.y), this.updateStick();
    }),
    (this.setState = function (e) {
      l = e;
    }),
    (s_oTable = this),
    this._init(t);
}
var s_oTable = null;
var playCount = 0;
