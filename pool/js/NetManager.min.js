function NetManager() {
  var e = null;
  // url: http://18.222.50.18:9001
  (this.connectServer = function () {
    e ||
      ("undefined" != typeof io
        ? ((e = io.connect("http://18.222.50.18:9001", {
            "force new connection": !0,
          })).on("connect", function () {
            console.log("connected to game server!"),
              (userID = window.localStorage.getItem("userID")),
              (poolID = window.localStorage.getItem("poolgameid"));
            var o = {};
            (o.roomID = window.localStorage.getItem("roomID")),
              (o.userID = userID),
              (o.poolID = poolID),
              e.emit("Req_ConnectRoom", o);
          }),
          e.on("Error", function (e) {
            console.log("connection error --\x3e " + e);
          }),
          e.on("disconnect", function () {
            console.log("disconnected!"), e.close();
          }),
          e.on("Leave_Room", function () {
            e.disconnect();
          }),
          e.on("Room_Full", function () {
            console.log("You are not the match member!"), e.disconnect();
          }),
          e.on("Room_Exist", function () {
            console.log("You are not the match member!"), e.disconnect();
          }),
          e.on("Res_ConnectRoom", function (e) {
            (roomID = e.roomID),
              (playerID_1 = e.playerID_1),
              (playerID_2 = e.playerID_2),
              s_oGame.setPlayer1Name(e.playerID_1);
          }),
          // e.on("Res_ConnectRoom", function (e) {
          //   (roomID = e.roomID),
          //     (playerID_1 = e.playerID_1),
          //     (playerID_2 = e.playerID_2),
          //     s_oGame.setPlayer1Name(e.playerID_1);
          // }),
          e.on("Res_StartGame", function (el) {
            (roomID = el.roomID),
              (playerID_1 = el.playerID_1),
              (playerID_2 = el.playerID_2),
              s_oGame.setPlayer1Name(el.playerID_1),
              s_oGame.setPlayer2Name(el.playerID_2),
              s_oTable.resetBallPos(el.ballPosList),
              (userTurnID = userID == playerID_1 ? 1 : 2),
              (netPlayState = NPS_Start_Game);

            gameTimer = 60;
            handleTimer = setInterval(() => {
              gameTimer--;
              console.log(gameTimer, "------timer------");
              if (timerEffectText === null) {
                timerEffectText = new CEffectText(
                  gameTimer,
                  s_oStageUpper3D,
                  FX_TOPBlink
                );
              } else {
                timerEffectText.setText(gameTimer);
              }

              if (gameTimer <= 0) {
                clearInterval(handleTimer);

                s_oGame.changeTurn(!0);
                s_oGame.hideShotBar(),
                  s_oTable.hideStick(),
                  s_oTable.hideHandCueBallDrag();
              }
            }, 1000);
          }),
          e.on("Res_Waiting_Turn", function (e) {
            (_iCurTurn = e == playerID_1 ? 1 : 2),
              s_oGame.AddAllEventListeners(),
              s_oTable.AddAllEventListeners(),
              console.log(e, "res_waiting_trun");
            e == userID
              ? ((netPlayState = NPS_Take_Turn),
                s_oTable.showStick(),
                s_oTable.showHandCueBallDrag())
              : (netPlayState = NPS_Waiting_Turn);
          }),
          e.on("Res_TurnChanged", function (e) {
            gameTimer = 60;
            handleTimer = setInterval(() => {
              gameTimer--;
              if (timerEffectText === null) {
                timerEffectText = new CEffectText(
                  gameTimer,
                  s_oStageUpper3D,
                  FX_TOPBlink
                );
              } else {
                timerEffectText.setText(gameTimer);
              }
              console.log(gameTimer, "----------");

              if (gameTimer <= 0) {
                clearInterval(handleTimer);
                s_oGame.changeTurn(!0);
                s_oGame.hideShotBar(),
                  s_oTable.hideStick(),
                  s_oTable.hideHandCueBallDrag();
              }
            }, 1000);
            if (e == userID) {
              var o = 1;
              (o = e == playerID_2 ? 2 : 1),
                // _iCurTurn != o && console.log("error --\x3e Turn Changed!"),
                (_iCurTurn = o),
                _iCurTurn != o && console.log("error --\x3e Turn Changed!"),
                console.log("res_turn", o, "----", _iCurTurn),
                localStorage.setItem("curTurnID", _iCurTurn),
                (netPlayState = e == userID ? NPS_Take_Turn : NPS_Waiting_Turn);
            }
          }),
          e.on("Res_Shoot", function (e) {
            console.log(e, "-----"), s_oTable.remoteShoot(e);
          }),
          e.on("res_clear_Timer", function (e) {
            console.log(
              localStorage.getItem("curTurnID"),
              "-----res_clear_timer-----"
            );
            clearInterval(handleTimer);
          }),
          e.on("CueBallPos", function (e) {
            s_oTable.setCueBallPos(e);
          }))
        : console.log("You must import socket.io.js as a plugin!"));
  }),
    (this.sendPacket = function (o, n) {
      e.emit(o, n);
    });
}
const NPS_None = 0,
  NPS_Waiting_Player = 1,
  NPS_Start_Game = 2,
  NPS_Waiting_Turn = 3,
  NPS_Take_Turn = 4;
var netPlayState = 0,
  roomID = "",
  userID = "",
  poolID = "",
  playerID_1 = "",
  playerID_2 = "";
