!(function (t, e) {
  "object" == typeof exports && "undefined" != typeof module
    ? (module.exports = e())
    : "function" == typeof define && define.amd
    ? define(e)
    : ((t = "undefined" != typeof globalThis ? globalThis : t || self),
      (t.io = e()));
})(this, function () {
  "use strict";
  function t(e) {
    "@babel/helpers - typeof";
    return (t =
      "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
        ? function (t) {
            return typeof t;
          }
        : function (t) {
            return t &&
              "function" == typeof Symbol &&
              t.constructor === Symbol &&
              t !== Symbol.prototype
              ? "symbol"
              : typeof t;
          })(e);
  }
  function e(t, e) {
    if (!(t instanceof e))
      throw new TypeError("Cannot call a class as a function");
  }
  function n(t, e) {
    for (var n = 0; n < e.length; n++) {
      var r = e[n];
      (r.enumerable = r.enumerable || !1),
        (r.configurable = !0),
        "value" in r && (r.writable = !0),
        Object.defineProperty(t, r.key, r);
    }
  }
  function r(t, e, r) {
    return (
      e && n(t.prototype, e),
      r && n(t, r),
      Object.defineProperty(t, "prototype", { writable: !1 }),
      t
    );
  }
  function i() {
    return (i = Object.assign
      ? Object.assign.bind()
      : function (t) {
          for (var e = 1; e < arguments.length; e++) {
            var n = arguments[e];
            for (var r in n)
              Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r]);
          }
          return t;
        }).apply(this, arguments);
  }
  function o(t, e) {
    if ("function" != typeof e && null !== e)
      throw new TypeError("Super expression must either be null or a function");
    (t.prototype = Object.create(e && e.prototype, {
      constructor: { value: t, writable: !0, configurable: !0 },
    })),
      Object.defineProperty(t, "prototype", { writable: !1 }),
      e && a(t, e);
  }
  function s(t) {
    return (s = Object.setPrototypeOf
      ? Object.getPrototypeOf.bind()
      : function (t) {
          return t.__proto__ || Object.getPrototypeOf(t);
        })(t);
  }
  function a(t, e) {
    return (a = Object.setPrototypeOf
      ? Object.setPrototypeOf.bind()
      : function (t, e) {
          return (t.__proto__ = e), t;
        })(t, e);
  }
  function c() {
    if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
    if (Reflect.construct.sham) return !1;
    if ("function" == typeof Proxy) return !0;
    try {
      return (
        Boolean.prototype.valueOf.call(
          Reflect.construct(Boolean, [], function () {})
        ),
        !0
      );
    } catch (t) {
      return !1;
    }
  }
  function u(t, e, n) {
    return (u = c()
      ? Reflect.construct.bind()
      : function (t, e, n) {
          var r = [null];
          r.push.apply(r, e);
          var i = new (Function.bind.apply(t, r))();
          return n && a(i, n.prototype), i;
        }).apply(null, arguments);
  }
  function h(t) {
    var e = "function" == typeof Map ? new Map() : void 0;
    return (h = function (t) {
      function n() {
        return u(t, arguments, s(this).constructor);
      }
      if (
        null === t ||
        !(function (t) {
          return -1 !== Function.toString.call(t).indexOf("[native code]");
        })(t)
      )
        return t;
      if ("function" != typeof t)
        throw new TypeError(
          "Super expression must either be null or a function"
        );
      if (void 0 !== e) {
        if (e.has(t)) return e.get(t);
        e.set(t, n);
      }
      return (
        (n.prototype = Object.create(t.prototype, {
          constructor: {
            value: n,
            enumerable: !1,
            writable: !0,
            configurable: !0,
          },
        })),
        a(n, t)
      );
    })(t);
  }
  function f(t) {
    if (void 0 === t)
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      );
    return t;
  }
  function l(t) {
    var e = c();
    return function () {
      var n,
        r = s(t);
      if (e) {
        var i = s(this).constructor;
        n = Reflect.construct(r, arguments, i);
      } else n = r.apply(this, arguments);
      return (function (t, e) {
        if (e && ("object" == typeof e || "function" == typeof e)) return e;
        if (void 0 !== e)
          throw new TypeError(
            "Derived constructors may only return object or undefined"
          );
        return f(t);
      })(this, n);
    };
  }
  function p() {
    return (p =
      "undefined" != typeof Reflect && Reflect.get
        ? Reflect.get.bind()
        : function (t, e, n) {
            var r = (function (t, e) {
              for (
                ;
                !Object.prototype.hasOwnProperty.call(t, e) &&
                null !== (t = s(t));

              );
              return t;
            })(t, e);
            if (r) {
              var i = Object.getOwnPropertyDescriptor(r, e);
              return i.get ? i.get.call(arguments.length < 3 ? t : n) : i.value;
            }
          }).apply(this, arguments);
  }
  function d(t, e) {
    (null == e || e > t.length) && (e = t.length);
    for (var n = 0, r = new Array(e); n < e; n++) r[n] = t[n];
    return r;
  }
  function y(t, e) {
    var n =
      ("undefined" != typeof Symbol && t[Symbol.iterator]) || t["@@iterator"];
    if (!n) {
      if (
        Array.isArray(t) ||
        (n = (function (t, e) {
          if (t) {
            if ("string" == typeof t) return d(t, e);
            var n = Object.prototype.toString.call(t).slice(8, -1);
            return (
              "Object" === n && t.constructor && (n = t.constructor.name),
              "Map" === n || "Set" === n
                ? Array.from(t)
                : "Arguments" === n ||
                  /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
                ? d(t, e)
                : void 0
            );
          }
        })(t)) ||
        (e && t && "number" == typeof t.length)
      ) {
        n && (t = n);
        var r = 0,
          i = function () {};
        return {
          s: i,
          n: function () {
            return r >= t.length ? { done: !0 } : { done: !1, value: t[r++] };
          },
          e: function (t) {
            throw t;
          },
          f: i,
        };
      }
      throw new TypeError(
        "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
      );
    }
    var o,
      s = !0,
      a = !1;
    return {
      s: function () {
        n = n.call(t);
      },
      n: function () {
        var t = n.next();
        return (s = t.done), t;
      },
      e: function (t) {
        (a = !0), (o = t);
      },
      f: function () {
        try {
          s || null == n.return || n.return();
        } finally {
          if (a) throw o;
        }
      },
    };
  }
  function v(t) {
    if (t)
      return (function (t) {
        for (var e in v.prototype) t[e] = v.prototype[e];
        return t;
      })(t);
  }
  function g(t) {
    for (
      var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), r = 1;
      r < e;
      r++
    )
      n[r - 1] = arguments[r];
    return n.reduce(function (e, n) {
      return t.hasOwnProperty(n) && (e[n] = t[n]), e;
    }, {});
  }
  function m(t, e) {
    e.useNativeTimers
      ? ((t.setTimeoutFn = G.bind(X)), (t.clearTimeoutFn = Z.bind(X)))
      : ((t.setTimeoutFn = X.setTimeout.bind(X)),
        (t.clearTimeoutFn = X.clearTimeout.bind(X)));
  }
  function k(t) {
    return "string" == typeof t
      ? (function (t) {
          for (var e = 0, n = 0, r = 0, i = t.length; r < i; r++)
            (e = t.charCodeAt(r)) < 128
              ? (n += 1)
              : e < 2048
              ? (n += 2)
              : e < 55296 || e >= 57344
              ? (n += 3)
              : (r++, (n += 4));
          return n;
        })(t)
      : Math.ceil((t.byteLength || t.size) * tt);
  }
  function b(t) {
    var e = "";
    do {
      (e = rt[t % it] + e), (t = Math.floor(t / it));
    } while (t > 0);
    return e;
  }
  function w() {
    var t = b(+new Date());
    return t !== Q ? ((st = 0), (Q = t)) : t + "." + b(st++);
  }
  function _(t) {
    var e = "";
    for (var n in t)
      t.hasOwnProperty(n) &&
        (e.length && (e += "&"),
        (e += encodeURIComponent(n) + "=" + encodeURIComponent(t[n])));
    return e;
  }
  function O(t) {
    var e = t.xdomain;
    try {
      if ("undefined" != typeof XMLHttpRequest && (!e || ut))
        return new XMLHttpRequest();
    } catch (t) {}
    if (!e)
      try {
        return new X[["Active"].concat("Object").join("X")](
          "Microsoft.XMLHTTP"
        );
      } catch (t) {}
  }
  function E() {}
  function A() {
    for (var t in lt.requests)
      lt.requests.hasOwnProperty(t) && lt.requests[t].abort();
  }
  function R(t) {
    var e = t,
      n = t.indexOf("["),
      r = t.indexOf("]");
    -1 != n &&
      -1 != r &&
      (t =
        t.substring(0, n) +
        t.substring(n, r).replace(/:/g, ";") +
        t.substring(r, t.length));
    for (var i = mt.exec(t || ""), o = {}, s = 14; s--; ) o[kt[s]] = i[s] || "";
    return (
      -1 != n &&
        -1 != r &&
        ((o.source = e),
        (o.host = o.host.substring(1, o.host.length - 1).replace(/;/g, ":")),
        (o.authority = o.authority
          .replace("[", "")
          .replace("]", "")
          .replace(/;/g, ":")),
        (o.ipv6uri = !0)),
      (o.pathNames = (function (t, e) {
        var n = e.replace(/\/{2,9}/g, "/").split("/");
        ("/" != e.slice(0, 1) && 0 !== e.length) || n.splice(0, 1);
        "/" == e.slice(-1) && n.splice(n.length - 1, 1);
        return n;
      })(0, o.path)),
      (o.queryKey = (function (t, e) {
        var n = {};
        return (
          e.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function (t, e, r) {
            e && (n[e] = r);
          }),
          n
        );
      })(0, o.query)),
      o
    );
  }
  function T(t) {
    return (
      (_t && (t instanceof ArrayBuffer || Ot(t))) ||
      (At && t instanceof Blob) ||
      (Rt && t instanceof File)
    );
  }
  function C(e, n) {
    if (!e || "object" !== t(e)) return !1;
    if (Array.isArray(e)) {
      for (var r = 0, i = e.length; r < i; r++) if (C(e[r])) return !0;
      return !1;
    }
    if (T(e)) return !0;
    if (e.toJSON && "function" == typeof e.toJSON && 1 === arguments.length)
      return C(e.toJSON(), !0);
    for (var o in e)
      if (Object.prototype.hasOwnProperty.call(e, o) && C(e[o])) return !0;
    return !1;
  }
  function B(e, n) {
    if (!e) return e;
    if (T(e)) {
      var r = { _placeholder: !0, num: n.length };
      return n.push(e), r;
    }
    if (Array.isArray(e)) {
      for (var i = new Array(e.length), o = 0; o < e.length; o++)
        i[o] = B(e[o], n);
      return i;
    }
    if ("object" === t(e) && !(e instanceof Date)) {
      var s = {};
      for (var a in e)
        Object.prototype.hasOwnProperty.call(e, a) && (s[a] = B(e[a], n));
      return s;
    }
    return e;
  }
  function S(e, n) {
    if (!e) return e;
    if (e && !0 === e._placeholder) {
      if ("number" == typeof e.num && e.num >= 0 && e.num < n.length)
        return n[e.num];
      throw new Error("illegal attachments");
    }
    if (Array.isArray(e)) for (var r = 0; r < e.length; r++) e[r] = S(e[r], n);
    else if ("object" === t(e))
      for (var i in e)
        Object.prototype.hasOwnProperty.call(e, i) && (e[i] = S(e[i], n));
    return e;
  }
  function N(t) {
    return "[object Object]" === Object.prototype.toString.call(t);
  }
  function x(t, e, n) {
    return (
      t.on(e, n),
      function () {
        t.off(e, n);
      }
    );
  }
  function L(t) {
    (t = t || {}),
      (this.ms = t.min || 100),
      (this.max = t.max || 1e4),
      (this.factor = t.factor || 2),
      (this.jitter = t.jitter > 0 && t.jitter <= 1 ? t.jitter : 0),
      (this.attempts = 0);
  }
  function P(e, n) {
    "object" === t(e) && ((n = e), (e = void 0));
    var r,
      i = (function (t) {
        var e =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "",
          n = arguments.length > 2 ? arguments[2] : void 0,
          r = t;
        (n = n || ("undefined" != typeof location && location)),
          null == t && (t = n.protocol + "//" + n.host),
          "string" == typeof t &&
            ("/" === t.charAt(0) &&
              (t = "/" === t.charAt(1) ? n.protocol + t : n.host + t),
            /^(https?|wss?):\/\//.test(t) ||
              (t = void 0 !== n ? n.protocol + "//" + t : "https://" + t),
            (r = R(t))),
          r.port ||
            (/^(http|ws)$/.test(r.protocol)
              ? (r.port = "80")
              : /^(http|ws)s$/.test(r.protocol) && (r.port = "443")),
          (r.path = r.path || "/");
        var i = -1 !== r.host.indexOf(":") ? "[" + r.host + "]" : r.host;
        return (
          (r.id = r.protocol + "://" + i + ":" + r.port + e),
          (r.href =
            r.protocol +
            "://" +
            i +
            (n && n.port === r.port ? "" : ":" + r.port)),
          r
        );
      })(e, (n = n || {}).path || "/socket.io"),
      o = i.source,
      s = i.id,
      a = i.path,
      c = jt[s] && a in jt[s].nsps;
    return (
      n.forceNew || n["force new connection"] || !1 === n.multiplex || c
        ? (r = new Pt(o, n))
        : (jt[s] || (jt[s] = new Pt(o, n)), (r = jt[s])),
      i.query && !n.query && (n.query = i.queryKey),
      r.socket(i.path, n)
    );
  }
  var j = Object.create(null);
  (j.open = "0"),
    (j.close = "1"),
    (j.ping = "2"),
    (j.pong = "3"),
    (j.message = "4"),
    (j.upgrade = "5"),
    (j.noop = "6");
  var q = Object.create(null);
  Object.keys(j).forEach(function (t) {
    q[j[t]] = t;
  });
  for (
    var I = { type: "error", data: "parser error" },
      D =
        "function" == typeof Blob ||
        ("undefined" != typeof Blob &&
          "[object BlobConstructor]" === Object.prototype.toString.call(Blob)),
      F = "function" == typeof ArrayBuffer,
      M = function (t, e, n) {
        var r = t.type,
          i = t.data;
        return D && i instanceof Blob
          ? e
            ? n(i)
            : U(i, n)
          : F &&
            (i instanceof ArrayBuffer ||
              (function (t) {
                return "function" == typeof ArrayBuffer.isView
                  ? ArrayBuffer.isView(t)
                  : t && t.buffer instanceof ArrayBuffer;
              })(i))
          ? e
            ? n(i)
            : U(new Blob([i]), n)
          : n(j[r] + (i || ""));
      },
      U = function (t, e) {
        var n = new FileReader();
        return (
          (n.onload = function () {
            var t = n.result.split(",")[1];
            e("b" + t);
          }),
          n.readAsDataURL(t)
        );
      },
      V = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
      H = "undefined" == typeof Uint8Array ? [] : new Uint8Array(256),
      K = 0;
    K < V.length;
    K++
  )
    H[V.charCodeAt(K)] = K;
  var Y = "function" == typeof ArrayBuffer,
    z = function (t, e) {
      if ("string" != typeof t) return { type: "message", data: $(t, e) };
      var n = t.charAt(0);
      if ("b" === n) return { type: "message", data: W(t.substring(1), e) };
      return q[n]
        ? t.length > 1
          ? { type: q[n], data: t.substring(1) }
          : { type: q[n] }
        : I;
    },
    W = function (t, e) {
      if (Y) {
        var n = (function (t) {
          var e,
            n,
            r,
            i,
            o,
            s = 0.75 * t.length,
            a = t.length,
            c = 0;
          "=" === t[t.length - 1] && (s--, "=" === t[t.length - 2] && s--);
          var u = new ArrayBuffer(s),
            h = new Uint8Array(u);
          for (e = 0; e < a; e += 4)
            (n = H[t.charCodeAt(e)]),
              (r = H[t.charCodeAt(e + 1)]),
              (i = H[t.charCodeAt(e + 2)]),
              (o = H[t.charCodeAt(e + 3)]),
              (h[c++] = (n << 2) | (r >> 4)),
              (h[c++] = ((15 & r) << 4) | (i >> 2)),
              (h[c++] = ((3 & i) << 6) | (63 & o));
          return u;
        })(t);
        return $(n, e);
      }
      return { base64: !0, data: t };
    },
    $ = function (t, e) {
      switch (e) {
        case "blob":
          return t instanceof ArrayBuffer ? new Blob([t]) : t;
        case "arraybuffer":
        default:
          return t;
      }
    },
    J = String.fromCharCode(30);
  (v.prototype.on = v.prototype.addEventListener =
    function (t, e) {
      return (
        (this._callbacks = this._callbacks || {}),
        (this._callbacks["$" + t] = this._callbacks["$" + t] || []).push(e),
        this
      );
    }),
    (v.prototype.once = function (t, e) {
      function n() {
        this.off(t, n), e.apply(this, arguments);
      }
      return (n.fn = e), this.on(t, n), this;
    }),
    (v.prototype.off =
      v.prototype.removeListener =
      v.prototype.removeAllListeners =
      v.prototype.removeEventListener =
        function (t, e) {
          if (
            ((this._callbacks = this._callbacks || {}), 0 == arguments.length)
          )
            return (this._callbacks = {}), this;
          var n = this._callbacks["$" + t];
          if (!n) return this;
          if (1 == arguments.length)
            return delete this._callbacks["$" + t], this;
          for (var r, i = 0; i < n.length; i++)
            if ((r = n[i]) === e || r.fn === e) {
              n.splice(i, 1);
              break;
            }
          return 0 === n.length && delete this._callbacks["$" + t], this;
        }),
    (v.prototype.emit = function (t) {
      this._callbacks = this._callbacks || {};
      for (
        var e = new Array(arguments.length - 1),
          n = this._callbacks["$" + t],
          r = 1;
        r < arguments.length;
        r++
      )
        e[r - 1] = arguments[r];
      if (n)
        for (var r = 0, i = (n = n.slice(0)).length; r < i; ++r)
          n[r].apply(this, e);
      return this;
    }),
    (v.prototype.emitReserved = v.prototype.emit),
    (v.prototype.listeners = function (t) {
      return (
        (this._callbacks = this._callbacks || {}),
        this._callbacks["$" + t] || []
      );
    }),
    (v.prototype.hasListeners = function (t) {
      return !!this.listeners(t).length;
    });
  for (
    var Q,
      X =
        "undefined" != typeof self
          ? self
          : "undefined" != typeof window
          ? window
          : Function("return this")(),
      G = X.setTimeout,
      Z = X.clearTimeout,
      tt = 1.33,
      et = (function (t) {
        function n(t, r, o) {
          var s;
          return (
            e(this, n),
            (s = i.call(this, t)),
            (s.description = r),
            (s.context = o),
            (s.type = "TransportError"),
            s
          );
        }
        o(n, h(Error));
        var i = l(n);
        return r(n);
      })(),
      nt = (function (t) {
        function n(t) {
          var r;
          return (
            e(this, n),
            (r = i.call(this)),
            (r.writable = !1),
            m(f(r), t),
            (r.opts = t),
            (r.query = t.query),
            (r.socket = t.socket),
            r
          );
        }
        o(n, v);
        var i = l(n);
        return (
          r(n, [
            {
              key: "onError",
              value: function (t, e, r) {
                return (
                  p(s(n.prototype), "emitReserved", this).call(
                    this,
                    "error",
                    new et(t, e, r)
                  ),
                  this
                );
              },
            },
            {
              key: "open",
              value: function () {
                return (this.readyState = "opening"), this.doOpen(), this;
              },
            },
            {
              key: "close",
              value: function () {
                return (
                  ("opening" !== this.readyState &&
                    "open" !== this.readyState) ||
                    (this.doClose(), this.onClose()),
                  this
                );
              },
            },
            {
              key: "send",
              value: function (t) {
                "open" === this.readyState && this.write(t);
              },
            },
            {
              key: "onOpen",
              value: function () {
                (this.readyState = "open"),
                  (this.writable = !0),
                  p(s(n.prototype), "emitReserved", this).call(this, "open");
              },
            },
            {
              key: "onData",
              value: function (t) {
                var e = z(t, this.socket.binaryType);
                this.onPacket(e);
              },
            },
            {
              key: "onPacket",
              value: function (t) {
                p(s(n.prototype), "emitReserved", this).call(this, "packet", t);
              },
            },
            {
              key: "onClose",
              value: function (t) {
                (this.readyState = "closed"),
                  p(s(n.prototype), "emitReserved", this).call(
                    this,
                    "close",
                    t
                  );
              },
            },
            { key: "pause", value: function (t) {} },
          ]),
          n
        );
      })(),
      rt =
        "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(
          ""
        ),
      it = 64,
      ot = {},
      st = 0,
      at = 0;
    at < it;
    at++
  )
    ot[rt[at]] = at;
  var ct = !1;
  try {
    ct =
      "undefined" != typeof XMLHttpRequest &&
      "withCredentials" in new XMLHttpRequest();
  } catch (t) {}
  var ut = ct,
    ht = null != new O({ xdomain: !1 }).responseType,
    ft = (function (t) {
      function n(t) {
        var r;
        if (
          (e(this, n),
          (r = s.call(this, t)),
          (r.polling = !1),
          "undefined" != typeof location)
        ) {
          var i = "https:" === location.protocol,
            o = location.port;
          o || (o = i ? "443" : "80"),
            (r.xd =
              ("undefined" != typeof location &&
                t.hostname !== location.hostname) ||
              o !== t.port),
            (r.xs = t.secure !== i);
        }
        var a = t && t.forceBase64;
        return (r.supportsBinary = ht && !a), r;
      }
      o(n, nt);
      var s = l(n);
      return (
        r(n, [
          {
            key: "name",
            get: function () {
              return "polling";
            },
          },
          {
            key: "doOpen",
            value: function () {
              this.poll();
            },
          },
          {
            key: "pause",
            value: function (t) {
              var e = this;
              this.readyState = "pausing";
              var n = function () {
                (e.readyState = "paused"), t();
              };
              if (this.polling || !this.writable) {
                var r = 0;
                this.polling &&
                  (r++,
                  this.once("pollComplete", function () {
                    --r || n();
                  })),
                  this.writable ||
                    (r++,
                    this.once("drain", function () {
                      --r || n();
                    }));
              } else n();
            },
          },
          {
            key: "poll",
            value: function () {
              (this.polling = !0), this.doPoll(), this.emitReserved("poll");
            },
          },
          {
            key: "onData",
            value: function (t) {
              var e = this;
              (function (t, e) {
                for (var n = t.split(J), r = [], i = 0; i < n.length; i++) {
                  var o = z(n[i], e);
                  if ((r.push(o), "error" === o.type)) break;
                }
                return r;
              })(t, this.socket.binaryType).forEach(function (t) {
                if (
                  ("opening" === e.readyState &&
                    "open" === t.type &&
                    e.onOpen(),
                  "close" === t.type)
                )
                  return (
                    e.onClose({
                      description: "transport closed by the server",
                    }),
                    !1
                  );
                e.onPacket(t);
              }),
                "closed" !== this.readyState &&
                  ((this.polling = !1),
                  this.emitReserved("pollComplete"),
                  "open" === this.readyState && this.poll());
            },
          },
          {
            key: "doClose",
            value: function () {
              var t = this,
                e = function () {
                  t.write([{ type: "close" }]);
                };
              "open" === this.readyState ? e() : this.once("open", e);
            },
          },
          {
            key: "write",
            value: function (t) {
              var e = this;
              (this.writable = !1),
                (function (t, e) {
                  var n = t.length,
                    r = new Array(n),
                    i = 0;
                  t.forEach(function (t, o) {
                    M(t, !1, function (t) {
                      (r[o] = t), ++i === n && e(r.join(J));
                    });
                  });
                })(t, function (t) {
                  e.doWrite(t, function () {
                    (e.writable = !0), e.emitReserved("drain");
                  });
                });
            },
          },
          {
            key: "uri",
            value: function () {
              var t = this.query || {},
                e = this.opts.secure ? "https" : "http",
                n = "";
              !1 !== this.opts.timestampRequests &&
                (t[this.opts.timestampParam] = w()),
                this.supportsBinary || t.sid || (t.b64 = 1),
                this.opts.port &&
                  (("https" === e && 443 !== Number(this.opts.port)) ||
                    ("http" === e && 80 !== Number(this.opts.port))) &&
                  (n = ":" + this.opts.port);
              var r = _(t);
              return (
                e +
                "://" +
                (-1 !== this.opts.hostname.indexOf(":")
                  ? "[" + this.opts.hostname + "]"
                  : this.opts.hostname) +
                n +
                this.opts.path +
                (r.length ? "?" + r : "")
              );
            },
          },
          {
            key: "request",
            value: function () {
              var t =
                arguments.length > 0 && void 0 !== arguments[0]
                  ? arguments[0]
                  : {};
              return (
                i(t, { xd: this.xd, xs: this.xs }, this.opts),
                new lt(this.uri(), t)
              );
            },
          },
          {
            key: "doWrite",
            value: function (t, e) {
              var n = this,
                r = this.request({ method: "POST", data: t });
              r.on("success", e),
                r.on("error", function (t, e) {
                  n.onError("xhr post error", t, e);
                });
            },
          },
          {
            key: "doPoll",
            value: function () {
              var t = this,
                e = this.request();
              e.on("data", this.onData.bind(this)),
                e.on("error", function (e, n) {
                  t.onError("xhr poll error", e, n);
                }),
                (this.pollXhr = e);
            },
          },
        ]),
        n
      );
    })(),
    lt = (function (t) {
      function n(t, r) {
        var o;
        return (
          e(this, n),
          (o = i.call(this)),
          m(f(o), r),
          (o.opts = r),
          (o.method = r.method || "GET"),
          (o.uri = t),
          (o.async = !1 !== r.async),
          (o.data = void 0 !== r.data ? r.data : null),
          o.create(),
          o
        );
      }
      o(n, v);
      var i = l(n);
      return (
        r(n, [
          {
            key: "create",
            value: function () {
              var t = this,
                e = g(
                  this.opts,
                  "agent",
                  "pfx",
                  "key",
                  "passphrase",
                  "cert",
                  "ca",
                  "ciphers",
                  "rejectUnauthorized",
                  "autoUnref"
                );
              (e.xdomain = !!this.opts.xd), (e.xscheme = !!this.opts.xs);
              var r = (this.xhr = new O(e));
              try {
                r.open(this.method, this.uri, this.async);
                try {
                  if (this.opts.extraHeaders) {
                    r.setDisableHeaderCheck && r.setDisableHeaderCheck(!0);
                    for (var i in this.opts.extraHeaders)
                      this.opts.extraHeaders.hasOwnProperty(i) &&
                        r.setRequestHeader(i, this.opts.extraHeaders[i]);
                  }
                } catch (t) {}
                if ("POST" === this.method)
                  try {
                    r.setRequestHeader(
                      "Content-type",
                      "text/plain;charset=UTF-8"
                    );
                  } catch (t) {}
                try {
                  r.setRequestHeader("Accept", "*/*");
                } catch (t) {}
                "withCredentials" in r &&
                  (r.withCredentials = this.opts.withCredentials),
                  this.opts.requestTimeout &&
                    (r.timeout = this.opts.requestTimeout),
                  (r.onreadystatechange = function () {
                    4 === r.readyState &&
                      (200 === r.status || 1223 === r.status
                        ? t.onLoad()
                        : t.setTimeoutFn(function () {
                            t.onError(
                              "number" == typeof r.status ? r.status : 0
                            );
                          }, 0));
                  }),
                  r.send(this.data);
              } catch (e) {
                return void this.setTimeoutFn(function () {
                  t.onError(e);
                }, 0);
              }
              "undefined" != typeof document &&
                ((this.index = n.requestsCount++),
                (n.requests[this.index] = this));
            },
          },
          {
            key: "onError",
            value: function (t) {
              this.emitReserved("error", t, this.xhr), this.cleanup(!0);
            },
          },
          {
            key: "cleanup",
            value: function (t) {
              if (void 0 !== this.xhr && null !== this.xhr) {
                if (((this.xhr.onreadystatechange = E), t))
                  try {
                    this.xhr.abort();
                  } catch (t) {}
                "undefined" != typeof document && delete n.requests[this.index],
                  (this.xhr = null);
              }
            },
          },
          {
            key: "onLoad",
            value: function () {
              var t = this.xhr.responseText;
              null !== t &&
                (this.emitReserved("data", t),
                this.emitReserved("success"),
                this.cleanup());
            },
          },
          {
            key: "abort",
            value: function () {
              this.cleanup();
            },
          },
        ]),
        n
      );
    })();
  if (
    ((lt.requestsCount = 0), (lt.requests = {}), "undefined" != typeof document)
  )
    if ("function" == typeof attachEvent) attachEvent("onunload", A);
    else if ("function" == typeof addEventListener) {
      var pt = "onpagehide" in X ? "pagehide" : "unload";
      addEventListener(pt, A, !1);
    }
  var dt =
      "function" == typeof Promise && "function" == typeof Promise.resolve
        ? function (t) {
            return Promise.resolve().then(t);
          }
        : function (t, e) {
            return e(t, 0);
          },
    yt = X.WebSocket || X.MozWebSocket,
    vt =
      "undefined" != typeof navigator &&
      "string" == typeof navigator.product &&
      "reactnative" === navigator.product.toLowerCase(),
    gt = {
      websocket: (function (t) {
        function n(t) {
          var r;
          return (
            e(this, n),
            (r = i.call(this, t)),
            (r.supportsBinary = !t.forceBase64),
            r
          );
        }
        o(n, nt);
        var i = l(n);
        return (
          r(n, [
            {
              key: "name",
              get: function () {
                return "websocket";
              },
            },
            {
              key: "doOpen",
              value: function () {
                if (this.check()) {
                  var t = this.uri(),
                    e = this.opts.protocols,
                    n = vt
                      ? {}
                      : g(
                          this.opts,
                          "agent",
                          "perMessageDeflate",
                          "pfx",
                          "key",
                          "passphrase",
                          "cert",
                          "ca",
                          "ciphers",
                          "rejectUnauthorized",
                          "localAddress",
                          "protocolVersion",
                          "origin",
                          "maxPayload",
                          "family",
                          "checkServerIdentity"
                        );
                  this.opts.extraHeaders &&
                    (n.headers = this.opts.extraHeaders);
                  try {
                    this.ws = vt
                      ? new yt(t, e, n)
                      : e
                      ? new yt(t, e)
                      : new yt(t);
                  } catch (t) {
                    return this.emitReserved("error", t);
                  }
                  (this.ws.binaryType =
                    this.socket.binaryType || "arraybuffer"),
                    this.addEventListeners();
                }
              },
            },
            {
              key: "addEventListeners",
              value: function () {
                var t = this;
                (this.ws.onopen = function () {
                  t.opts.autoUnref && t.ws._socket.unref(), t.onOpen();
                }),
                  (this.ws.onclose = function (e) {
                    return t.onClose({
                      description: "websocket connection closed",
                      context: e,
                    });
                  }),
                  (this.ws.onmessage = function (e) {
                    return t.onData(e.data);
                  }),
                  (this.ws.onerror = function (e) {
                    return t.onError("websocket error", e);
                  });
              },
            },
            {
              key: "write",
              value: function (t) {
                var e = this;
                this.writable = !1;
                for (
                  var n = function (n) {
                      var r = t[n],
                        i = n === t.length - 1;
                      M(r, e.supportsBinary, function (t) {
                        try {
                          e.ws.send(t);
                        } catch (t) {}
                        i &&
                          dt(function () {
                            (e.writable = !0), e.emitReserved("drain");
                          }, e.setTimeoutFn);
                      });
                    },
                    r = 0;
                  r < t.length;
                  r++
                )
                  n(r);
              },
            },
            {
              key: "doClose",
              value: function () {
                void 0 !== this.ws && (this.ws.close(), (this.ws = null));
              },
            },
            {
              key: "uri",
              value: function () {
                var t = this.query || {},
                  e = this.opts.secure ? "wss" : "ws",
                  n = "";
                this.opts.port &&
                  (("wss" === e && 443 !== Number(this.opts.port)) ||
                    ("ws" === e && 80 !== Number(this.opts.port))) &&
                  (n = ":" + this.opts.port),
                  this.opts.timestampRequests &&
                    (t[this.opts.timestampParam] = w()),
                  this.supportsBinary || (t.b64 = 1);
                var r = _(t);
                return (
                  e +
                  "://" +
                  (-1 !== this.opts.hostname.indexOf(":")
                    ? "[" + this.opts.hostname + "]"
                    : this.opts.hostname) +
                  n +
                  this.opts.path +
                  (r.length ? "?" + r : "")
                );
              },
            },
            {
              key: "check",
              value: function () {
                return !!yt;
              },
            },
          ]),
          n
        );
      })(),
      polling: ft,
    },
    mt =
      /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,
    kt = [
      "source",
      "protocol",
      "authority",
      "userInfo",
      "user",
      "password",
      "host",
      "port",
      "relative",
      "path",
      "directory",
      "file",
      "query",
      "anchor",
    ],
    bt = (function (n) {
      function s(n) {
        var r,
          o =
            arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
        return (
          e(this, s),
          (r = a.call(this)),
          (r.writeBuffer = []),
          n && "object" === t(n) && ((o = n), (n = null)),
          n
            ? ((n = R(n)),
              (o.hostname = n.host),
              (o.secure = "https" === n.protocol || "wss" === n.protocol),
              (o.port = n.port),
              n.query && (o.query = n.query))
            : o.host && (o.hostname = R(o.host).host),
          m(f(r), o),
          (r.secure =
            null != o.secure
              ? o.secure
              : "undefined" != typeof location &&
                "https:" === location.protocol),
          o.hostname && !o.port && (o.port = r.secure ? "443" : "80"),
          (r.hostname =
            o.hostname ||
            ("undefined" != typeof location ? location.hostname : "localhost")),
          (r.port =
            o.port ||
            ("undefined" != typeof location && location.port
              ? location.port
              : r.secure
              ? "443"
              : "80")),
          (r.transports = o.transports || ["polling", "websocket"]),
          (r.writeBuffer = []),
          (r.prevBufferLen = 0),
          (r.opts = i(
            {
              path: "/engine.io",
              agent: !1,
              withCredentials: !1,
              upgrade: !0,
              timestampParam: "t",
              rememberUpgrade: !1,
              addTrailingSlash: !0,
              rejectUnauthorized: !0,
              perMessageDeflate: { threshold: 1024 },
              transportOptions: {},
              closeOnBeforeunload: !0,
            },
            o
          )),
          (r.opts.path =
            r.opts.path.replace(/\/$/, "") +
            (r.opts.addTrailingSlash ? "/" : "")),
          "string" == typeof r.opts.query &&
            (r.opts.query = (function (t) {
              for (
                var e = {}, n = t.split("&"), r = 0, i = n.length;
                r < i;
                r++
              ) {
                var o = n[r].split("=");
                e[decodeURIComponent(o[0])] = decodeURIComponent(o[1]);
              }
              return e;
            })(r.opts.query)),
          (r.id = null),
          (r.upgrades = null),
          (r.pingInterval = null),
          (r.pingTimeout = null),
          (r.pingTimeoutTimer = null),
          "function" == typeof addEventListener &&
            (r.opts.closeOnBeforeunload &&
              ((r.beforeunloadEventListener = function () {
                r.transport &&
                  (r.transport.removeAllListeners(), r.transport.close());
              }),
              addEventListener(
                "beforeunload",
                r.beforeunloadEventListener,
                !1
              )),
            "localhost" !== r.hostname &&
              ((r.offlineEventListener = function () {
                r.onClose("transport close", {
                  description: "network connection lost",
                });
              }),
              addEventListener("offline", r.offlineEventListener, !1))),
          r.open(),
          r
        );
      }
      o(s, v);
      var a = l(s);
      return (
        r(s, [
          {
            key: "createTransport",
            value: function (t) {
              var e = i({}, this.opts.query);
              (e.EIO = 4), (e.transport = t), this.id && (e.sid = this.id);
              var n = i({}, this.opts.transportOptions[t], this.opts, {
                query: e,
                socket: this,
                hostname: this.hostname,
                secure: this.secure,
                port: this.port,
              });
              return new gt[t](n);
            },
          },
          {
            key: "open",
            value: function () {
              var t,
                e = this;
              if (
                this.opts.rememberUpgrade &&
                s.priorWebsocketSuccess &&
                -1 !== this.transports.indexOf("websocket")
              )
                t = "websocket";
              else {
                if (0 === this.transports.length)
                  return void this.setTimeoutFn(function () {
                    e.emitReserved("error", "No transports available");
                  }, 0);
                t = this.transports[0];
              }
              this.readyState = "opening";
              try {
                t = this.createTransport(t);
              } catch (t) {
                return this.transports.shift(), void this.open();
              }
              t.open(), this.setTransport(t);
            },
          },
          {
            key: "setTransport",
            value: function (t) {
              var e = this;
              this.transport && this.transport.removeAllListeners(),
                (this.transport = t),
                t
                  .on("drain", this.onDrain.bind(this))
                  .on("packet", this.onPacket.bind(this))
                  .on("error", this.onError.bind(this))
                  .on("close", function (t) {
                    return e.onClose("transport close", t);
                  });
            },
          },
          {
            key: "probe",
            value: function (t) {
              function e() {
                c || ((c = !0), f(), a.close(), (a = null));
              }
              function n() {
                h("transport closed");
              }
              function r() {
                h("socket closed");
              }
              function i(t) {
                a && t.name !== a.name && e();
              }
              var o = this,
                a = this.createTransport(t),
                c = !1;
              s.priorWebsocketSuccess = !1;
              var u = function () {
                  c ||
                    (a.send([{ type: "ping", data: "probe" }]),
                    a.once("packet", function (t) {
                      if (!c)
                        if ("pong" === t.type && "probe" === t.data) {
                          if (
                            ((o.upgrading = !0),
                            o.emitReserved("upgrading", a),
                            !a)
                          )
                            return;
                          (s.priorWebsocketSuccess = "websocket" === a.name),
                            o.transport.pause(function () {
                              c ||
                                ("closed" !== o.readyState &&
                                  (f(),
                                  o.setTransport(a),
                                  a.send([{ type: "upgrade" }]),
                                  o.emitReserved("upgrade", a),
                                  (a = null),
                                  (o.upgrading = !1),
                                  o.flush()));
                            });
                        } else {
                          var e = new Error("probe error");
                          (e.transport = a.name),
                            o.emitReserved("upgradeError", e);
                        }
                    }));
                },
                h = function (t) {
                  var n = new Error("probe error: " + t);
                  (n.transport = a.name),
                    e(),
                    o.emitReserved("upgradeError", n);
                },
                f = function () {
                  a.removeListener("open", u),
                    a.removeListener("error", h),
                    a.removeListener("close", n),
                    o.off("close", r),
                    o.off("upgrading", i);
                };
              a.once("open", u),
                a.once("error", h),
                a.once("close", n),
                this.once("close", r),
                this.once("upgrading", i),
                a.open();
            },
          },
          {
            key: "onOpen",
            value: function () {
              if (
                ((this.readyState = "open"),
                (s.priorWebsocketSuccess = "websocket" === this.transport.name),
                this.emitReserved("open"),
                this.flush(),
                "open" === this.readyState && this.opts.upgrade)
              )
                for (var t = 0, e = this.upgrades.length; t < e; t++)
                  this.probe(this.upgrades[t]);
            },
          },
          {
            key: "onPacket",
            value: function (t) {
              if (
                "opening" === this.readyState ||
                "open" === this.readyState ||
                "closing" === this.readyState
              )
                switch (
                  (this.emitReserved("packet", t),
                  this.emitReserved("heartbeat"),
                  t.type)
                ) {
                  case "open":
                    this.onHandshake(JSON.parse(t.data));
                    break;
                  case "ping":
                    this.resetPingTimeout(),
                      this.sendPacket("pong"),
                      this.emitReserved("ping"),
                      this.emitReserved("pong");
                    break;
                  case "error":
                    var e = new Error("server error");
                    (e.code = t.data), this.onError(e);
                    break;
                  case "message":
                    this.emitReserved("data", t.data),
                      this.emitReserved("message", t.data);
                }
            },
          },
          {
            key: "onHandshake",
            value: function (t) {
              this.emitReserved("handshake", t),
                (this.id = t.sid),
                (this.transport.query.sid = t.sid),
                (this.upgrades = this.filterUpgrades(t.upgrades)),
                (this.pingInterval = t.pingInterval),
                (this.pingTimeout = t.pingTimeout),
                (this.maxPayload = t.maxPayload),
                this.onOpen(),
                "closed" !== this.readyState && this.resetPingTimeout();
            },
          },
          {
            key: "resetPingTimeout",
            value: function () {
              var t = this;
              this.clearTimeoutFn(this.pingTimeoutTimer),
                (this.pingTimeoutTimer = this.setTimeoutFn(function () {
                  t.onClose("ping timeout");
                }, this.pingInterval + this.pingTimeout)),
                this.opts.autoUnref && this.pingTimeoutTimer.unref();
            },
          },
          {
            key: "onDrain",
            value: function () {
              this.writeBuffer.splice(0, this.prevBufferLen),
                (this.prevBufferLen = 0),
                0 === this.writeBuffer.length
                  ? this.emitReserved("drain")
                  : this.flush();
            },
          },
          {
            key: "flush",
            value: function () {
              if (
                "closed" !== this.readyState &&
                this.transport.writable &&
                !this.upgrading &&
                this.writeBuffer.length
              ) {
                var t = this.getWritablePackets();
                this.transport.send(t),
                  (this.prevBufferLen = t.length),
                  this.emitReserved("flush");
              }
            },
          },
          {
            key: "getWritablePackets",
            value: function () {
              if (
                !(
                  this.maxPayload &&
                  "polling" === this.transport.name &&
                  this.writeBuffer.length > 1
                )
              )
                return this.writeBuffer;
              for (var t = 1, e = 0; e < this.writeBuffer.length; e++) {
                var n = this.writeBuffer[e].data;
                if ((n && (t += k(n)), e > 0 && t > this.maxPayload))
                  return this.writeBuffer.slice(0, e);
                t += 2;
              }
              return this.writeBuffer;
            },
          },
          {
            key: "write",
            value: function (t, e, n) {
              return this.sendPacket("message", t, e, n), this;
            },
          },
          {
            key: "send",
            value: function (t, e, n) {
              return this.sendPacket("message", t, e, n), this;
            },
          },
          {
            key: "sendPacket",
            value: function (t, e, n, r) {
              if (
                ("function" == typeof e && ((r = e), (e = void 0)),
                "function" == typeof n && ((r = n), (n = null)),
                "closing" !== this.readyState && "closed" !== this.readyState)
              ) {
                (n = n || {}).compress = !1 !== n.compress;
                var i = { type: t, data: e, options: n };
                this.emitReserved("packetCreate", i),
                  this.writeBuffer.push(i),
                  r && this.once("flush", r),
                  this.flush();
              }
            },
          },
          {
            key: "close",
            value: function () {
              var t = this,
                e = function () {
                  t.onClose("forced close"), t.transport.close();
                },
                n = function n() {
                  t.off("upgrade", n), t.off("upgradeError", n), e();
                },
                r = function () {
                  t.once("upgrade", n), t.once("upgradeError", n);
                };
              return (
                ("opening" !== this.readyState && "open" !== this.readyState) ||
                  ((this.readyState = "closing"),
                  this.writeBuffer.length
                    ? this.once("drain", function () {
                        t.upgrading ? r() : e();
                      })
                    : this.upgrading
                    ? r()
                    : e()),
                this
              );
            },
          },
          {
            key: "onError",
            value: function (t) {
              (s.priorWebsocketSuccess = !1),
                this.emitReserved("error", t),
                this.onClose("transport error", t);
            },
          },
          {
            key: "onClose",
            value: function (t, e) {
              ("opening" !== this.readyState &&
                "open" !== this.readyState &&
                "closing" !== this.readyState) ||
                (this.clearTimeoutFn(this.pingTimeoutTimer),
                this.transport.removeAllListeners("close"),
                this.transport.close(),
                this.transport.removeAllListeners(),
                "function" == typeof removeEventListener &&
                  (removeEventListener(
                    "beforeunload",
                    this.beforeunloadEventListener,
                    !1
                  ),
                  removeEventListener(
                    "offline",
                    this.offlineEventListener,
                    !1
                  )),
                (this.readyState = "closed"),
                (this.id = null),
                this.emitReserved("close", t, e),
                (this.writeBuffer = []),
                (this.prevBufferLen = 0));
            },
          },
          {
            key: "filterUpgrades",
            value: function (t) {
              for (var e = [], n = 0, r = t.length; n < r; n++)
                ~this.transports.indexOf(t[n]) && e.push(t[n]);
              return e;
            },
          },
        ]),
        s
      );
    })();
  (bt.protocol = 4), bt.protocol;
  var wt,
    _t = "function" == typeof ArrayBuffer,
    Ot = function (t) {
      return "function" == typeof ArrayBuffer.isView
        ? ArrayBuffer.isView(t)
        : t.buffer instanceof ArrayBuffer;
    },
    Et = Object.prototype.toString,
    At =
      "function" == typeof Blob ||
      ("undefined" != typeof Blob &&
        "[object BlobConstructor]" === Et.call(Blob)),
    Rt =
      "function" == typeof File ||
      ("undefined" != typeof File &&
        "[object FileConstructor]" === Et.call(File)),
    Tt = [
      "connect",
      "connect_error",
      "disconnect",
      "disconnecting",
      "newListener",
      "removeListener",
    ];
  !(function (t) {
    (t[(t.CONNECT = 0)] = "CONNECT"),
      (t[(t.DISCONNECT = 1)] = "DISCONNECT"),
      (t[(t.EVENT = 2)] = "EVENT"),
      (t[(t.ACK = 3)] = "ACK"),
      (t[(t.CONNECT_ERROR = 4)] = "CONNECT_ERROR"),
      (t[(t.BINARY_EVENT = 5)] = "BINARY_EVENT"),
      (t[(t.BINARY_ACK = 6)] = "BINARY_ACK");
  })(wt || (wt = {}));
  var Ct = (function () {
      function t(n) {
        e(this, t), (this.replacer = n);
      }
      return (
        r(t, [
          {
            key: "encode",
            value: function (t) {
              return (t.type !== wt.EVENT && t.type !== wt.ACK) || !C(t)
                ? [this.encodeAsString(t)]
                : this.encodeAsBinary({
                    type: t.type === wt.EVENT ? wt.BINARY_EVENT : wt.BINARY_ACK,
                    nsp: t.nsp,
                    data: t.data,
                    id: t.id,
                  });
            },
          },
          {
            key: "encodeAsString",
            value: function (t) {
              var e = "" + t.type;
              return (
                (t.type !== wt.BINARY_EVENT && t.type !== wt.BINARY_ACK) ||
                  (e += t.attachments + "-"),
                t.nsp && "/" !== t.nsp && (e += t.nsp + ","),
                null != t.id && (e += t.id),
                null != t.data && (e += JSON.stringify(t.data, this.replacer)),
                e
              );
            },
          },
          {
            key: "encodeAsBinary",
            value: function (t) {
              var e = (function (t) {
                  var e = [],
                    n = t.data,
                    r = t;
                  return (
                    (r.data = B(n, e)),
                    (r.attachments = e.length),
                    { packet: r, buffers: e }
                  );
                })(t),
                n = this.encodeAsString(e.packet),
                r = e.buffers;
              return r.unshift(n), r;
            },
          },
        ]),
        t
      );
    })(),
    Bt = (function (t) {
      function n(t) {
        var r;
        return e(this, n), (r = i.call(this)), (r.reviver = t), r;
      }
      o(n, v);
      var i = l(n);
      return (
        r(
          n,
          [
            {
              key: "add",
              value: function (t) {
                var e;
                if ("string" == typeof t) {
                  if (this.reconstructor)
                    throw new Error(
                      "got plaintext data when reconstructing a packet"
                    );
                  var r = (e = this.decodeString(t)).type === wt.BINARY_EVENT;
                  r || e.type === wt.BINARY_ACK
                    ? ((e.type = r ? wt.EVENT : wt.ACK),
                      (this.reconstructor = new St(e)),
                      0 === e.attachments &&
                        p(s(n.prototype), "emitReserved", this).call(
                          this,
                          "decoded",
                          e
                        ))
                    : p(s(n.prototype), "emitReserved", this).call(
                        this,
                        "decoded",
                        e
                      );
                } else {
                  if (!T(t) && !t.base64) throw new Error("Unknown type: " + t);
                  if (!this.reconstructor)
                    throw new Error(
                      "got binary data when not reconstructing a packet"
                    );
                  (e = this.reconstructor.takeBinaryData(t)) &&
                    ((this.reconstructor = null),
                    p(s(n.prototype), "emitReserved", this).call(
                      this,
                      "decoded",
                      e
                    ));
                }
              },
            },
            {
              key: "decodeString",
              value: function (t) {
                var e = 0,
                  r = { type: Number(t.charAt(0)) };
                if (void 0 === wt[r.type])
                  throw new Error("unknown packet type " + r.type);
                if (r.type === wt.BINARY_EVENT || r.type === wt.BINARY_ACK) {
                  for (var i = e + 1; "-" !== t.charAt(++e) && e != t.length; );
                  var o = t.substring(i, e);
                  if (o != Number(o) || "-" !== t.charAt(e))
                    throw new Error("Illegal attachments");
                  r.attachments = Number(o);
                }
                if ("/" === t.charAt(e + 1)) {
                  for (var s = e + 1; ++e; ) {
                    if ("," === t.charAt(e)) break;
                    if (e === t.length) break;
                  }
                  r.nsp = t.substring(s, e);
                } else r.nsp = "/";
                var a = t.charAt(e + 1);
                if ("" !== a && Number(a) == a) {
                  for (var c = e + 1; ++e; ) {
                    var u = t.charAt(e);
                    if (null == u || Number(u) != u) {
                      --e;
                      break;
                    }
                    if (e === t.length) break;
                  }
                  r.id = Number(t.substring(c, e + 1));
                }
                if (t.charAt(++e)) {
                  var h = this.tryParse(t.substr(e));
                  if (!n.isPayloadValid(r.type, h))
                    throw new Error("invalid payload");
                  r.data = h;
                }
                return r;
              },
            },
            {
              key: "tryParse",
              value: function (t) {
                try {
                  return JSON.parse(t, this.reviver);
                } catch (t) {
                  return !1;
                }
              },
            },
            {
              key: "destroy",
              value: function () {
                this.reconstructor &&
                  (this.reconstructor.finishedReconstruction(),
                  (this.reconstructor = null));
              },
            },
          ],
          [
            {
              key: "isPayloadValid",
              value: function (t, e) {
                switch (t) {
                  case wt.CONNECT:
                    return N(e);
                  case wt.DISCONNECT:
                    return void 0 === e;
                  case wt.CONNECT_ERROR:
                    return "string" == typeof e || N(e);
                  case wt.EVENT:
                  case wt.BINARY_EVENT:
                    return (
                      Array.isArray(e) &&
                      ("number" == typeof e[0] ||
                        ("string" == typeof e[0] && -1 === Tt.indexOf(e[0])))
                    );
                  case wt.ACK:
                  case wt.BINARY_ACK:
                    return Array.isArray(e);
                }
              },
            },
          ]
        ),
        n
      );
    })(),
    St = (function () {
      function t(n) {
        e(this, t),
          (this.packet = n),
          (this.buffers = []),
          (this.reconPack = n);
      }
      return (
        r(t, [
          {
            key: "takeBinaryData",
            value: function (t) {
              if (
                (this.buffers.push(t),
                this.buffers.length === this.reconPack.attachments)
              ) {
                var e = (function (t, e) {
                  return (t.data = S(t.data, e)), delete t.attachments, t;
                })(this.reconPack, this.buffers);
                return this.finishedReconstruction(), e;
              }
              return null;
            },
          },
          {
            key: "finishedReconstruction",
            value: function () {
              (this.reconPack = null), (this.buffers = []);
            },
          },
        ]),
        t
      );
    })(),
    Nt = Object.freeze({
      __proto__: null,
      protocol: 5,
      get PacketType() {
        return wt;
      },
      Encoder: Ct,
      Decoder: Bt,
    }),
    xt = Object.freeze({
      connect: 1,
      connect_error: 1,
      disconnect: 1,
      disconnecting: 1,
      newListener: 1,
      removeListener: 1,
    }),
    Lt = (function (t) {
      function n(t, r, o) {
        var s;
        return (
          e(this, n),
          (s = a.call(this)),
          (s.connected = !1),
          (s.recovered = !1),
          (s.receiveBuffer = []),
          (s.sendBuffer = []),
          (s._queue = []),
          (s._queueSeq = 0),
          (s.ids = 0),
          (s.acks = {}),
          (s.flags = {}),
          (s.io = t),
          (s.nsp = r),
          o && o.auth && (s.auth = o.auth),
          (s._opts = i({}, o)),
          s.io._autoConnect && s.open(),
          s
        );
      }
      o(n, v);
      var a = l(n);
      return (
        r(n, [
          {
            key: "disconnected",
            get: function () {
              return !this.connected;
            },
          },
          {
            key: "subEvents",
            value: function () {
              if (!this.subs) {
                var t = this.io;
                this.subs = [
                  x(t, "open", this.onopen.bind(this)),
                  x(t, "packet", this.onpacket.bind(this)),
                  x(t, "error", this.onerror.bind(this)),
                  x(t, "close", this.onclose.bind(this)),
                ];
              }
            },
          },
          {
            key: "active",
            get: function () {
              return !!this.subs;
            },
          },
          {
            key: "connect",
            value: function () {
              return this.connected
                ? this
                : (this.subEvents(),
                  this.io._reconnecting || this.io.open(),
                  "open" === this.io._readyState && this.onopen(),
                  this);
            },
          },
          {
            key: "open",
            value: function () {
              return this.connect();
            },
          },
          {
            key: "send",
            value: function () {
              for (
                var t = arguments.length, e = new Array(t), n = 0;
                n < t;
                n++
              )
                e[n] = arguments[n];
              return e.unshift("message"), this.emit.apply(this, e), this;
            },
          },
          {
            key: "emit",
            value: function (t) {
              if (xt.hasOwnProperty(t))
                throw new Error(
                  '"' + t.toString() + '" is a reserved event name'
                );
              for (
                var e = arguments.length,
                  n = new Array(e > 1 ? e - 1 : 0),
                  r = 1;
                r < e;
                r++
              )
                n[r - 1] = arguments[r];
              if (
                (n.unshift(t),
                this._opts.retries &&
                  !this.flags.fromQueue &&
                  !this.flags.volatile)
              )
                return this._addToQueue(n), this;
              var i = { type: wt.EVENT, data: n };
              if (
                ((i.options = {}),
                (i.options.compress = !1 !== this.flags.compress),
                "function" == typeof n[n.length - 1])
              ) {
                var o = this.ids++,
                  s = n.pop();
                this._registerAckCallback(o, s), (i.id = o);
              }
              var a =
                this.io.engine &&
                this.io.engine.transport &&
                this.io.engine.transport.writable;
              return (
                (this.flags.volatile && (!a || !this.connected)) ||
                  (this.connected
                    ? (this.notifyOutgoingListeners(i), this.packet(i))
                    : this.sendBuffer.push(i)),
                (this.flags = {}),
                this
              );
            },
          },
          {
            key: "_registerAckCallback",
            value: function (t, e) {
              var n,
                r = this,
                i =
                  null !== (n = this.flags.timeout) && void 0 !== n
                    ? n
                    : this._opts.ackTimeout;
              if (void 0 !== i) {
                var o = this.io.setTimeoutFn(function () {
                  delete r.acks[t];
                  for (var n = 0; n < r.sendBuffer.length; n++)
                    r.sendBuffer[n].id === t && r.sendBuffer.splice(n, 1);
                  e.call(r, new Error("operation has timed out"));
                }, i);
                this.acks[t] = function () {
                  r.io.clearTimeoutFn(o);
                  for (
                    var t = arguments.length, n = new Array(t), i = 0;
                    i < t;
                    i++
                  )
                    n[i] = arguments[i];
                  e.apply(r, [null].concat(n));
                };
              } else this.acks[t] = e;
            },
          },
          {
            key: "emitWithAck",
            value: function (t) {
              for (
                var e = this,
                  n = arguments.length,
                  r = new Array(n > 1 ? n - 1 : 0),
                  i = 1;
                i < n;
                i++
              )
                r[i - 1] = arguments[i];
              var o =
                void 0 !== this.flags.timeout ||
                void 0 !== this._opts.ackTimeout;
              return new Promise(function (n, i) {
                r.push(function (t, e) {
                  return o ? (t ? i(t) : n(e)) : n(t);
                }),
                  e.emit.apply(e, [t].concat(r));
              });
            },
          },
          {
            key: "_addToQueue",
            value: function (t) {
              var e,
                n = this;
              "function" == typeof t[t.length - 1] && (e = t.pop());
              var r = {
                id: this._queueSeq++,
                tryCount: 0,
                pending: !1,
                args: t,
                flags: i({ fromQueue: !0 }, this.flags),
              };
              t.push(function (t) {
                if (r === n._queue[0]) {
                  if (null !== t)
                    r.tryCount > n._opts.retries &&
                      (n._queue.shift(), e && e(t));
                  else if ((n._queue.shift(), e)) {
                    for (
                      var i = arguments.length,
                        o = new Array(i > 1 ? i - 1 : 0),
                        s = 1;
                      s < i;
                      s++
                    )
                      o[s - 1] = arguments[s];
                    e.apply(void 0, [null].concat(o));
                  }
                  return (r.pending = !1), n._drainQueue();
                }
              }),
                this._queue.push(r),
                this._drainQueue();
            },
          },
          {
            key: "_drainQueue",
            value: function () {
              var t =
                arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
              if (this.connected && 0 !== this._queue.length) {
                var e = this._queue[0];
                (e.pending && !t) ||
                  ((e.pending = !0),
                  e.tryCount++,
                  (this.flags = e.flags),
                  this.emit.apply(this, e.args));
              }
            },
          },
          {
            key: "packet",
            value: function (t) {
              (t.nsp = this.nsp), this.io._packet(t);
            },
          },
          {
            key: "onopen",
            value: function () {
              var t = this;
              "function" == typeof this.auth
                ? this.auth(function (e) {
                    t._sendConnectPacket(e);
                  })
                : this._sendConnectPacket(this.auth);
            },
          },
          {
            key: "_sendConnectPacket",
            value: function (t) {
              this.packet({
                type: wt.CONNECT,
                data: this._pid
                  ? i({ pid: this._pid, offset: this._lastOffset }, t)
                  : t,
              });
            },
          },
          {
            key: "onerror",
            value: function (t) {
              this.connected || this.emitReserved("connect_error", t);
            },
          },
          {
            key: "onclose",
            value: function (t, e) {
              (this.connected = !1),
                delete this.id,
                this.emitReserved("disconnect", t, e);
            },
          },
          {
            key: "onpacket",
            value: function (t) {
              if (t.nsp === this.nsp)
                switch (t.type) {
                  case wt.CONNECT:
                    t.data && t.data.sid
                      ? this.onconnect(t.data.sid, t.data.pid)
                      : this.emitReserved(
                          "connect_error",
                          new Error(
                            "It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"
                          )
                        );
                    break;
                  case wt.EVENT:
                  case wt.BINARY_EVENT:
                    this.onevent(t);
                    break;
                  case wt.ACK:
                  case wt.BINARY_ACK:
                    this.onack(t);
                    break;
                  case wt.DISCONNECT:
                    this.ondisconnect();
                    break;
                  case wt.CONNECT_ERROR:
                    this.destroy();
                    var e = new Error(t.data.message);
                    (e.data = t.data.data),
                      this.emitReserved("connect_error", e);
                }
            },
          },
          {
            key: "onevent",
            value: function (t) {
              var e = t.data || [];
              null != t.id && e.push(this.ack(t.id)),
                this.connected
                  ? this.emitEvent(e)
                  : this.receiveBuffer.push(Object.freeze(e));
            },
          },
          {
            key: "emitEvent",
            value: function (t) {
              if (this._anyListeners && this._anyListeners.length) {
                var e,
                  r = y(this._anyListeners.slice());
                try {
                  for (r.s(); !(e = r.n()).done; ) {
                    e.value.apply(this, t);
                  }
                } catch (t) {
                  r.e(t);
                } finally {
                  r.f();
                }
              }
              p(s(n.prototype), "emit", this).apply(this, t),
                this._pid &&
                  t.length &&
                  "string" == typeof t[t.length - 1] &&
                  (this._lastOffset = t[t.length - 1]);
            },
          },
          {
            key: "ack",
            value: function (t) {
              var e = this,
                n = !1;
              return function () {
                if (!n) {
                  n = !0;
                  for (
                    var r = arguments.length, i = new Array(r), o = 0;
                    o < r;
                    o++
                  )
                    i[o] = arguments[o];
                  e.packet({ type: wt.ACK, id: t, data: i });
                }
              };
            },
          },
          {
            key: "onack",
            value: function (t) {
              var e = this.acks[t.id];
              "function" == typeof e &&
                (e.apply(this, t.data), delete this.acks[t.id]);
            },
          },
          {
            key: "onconnect",
            value: function (t, e) {
              (this.id = t),
                (this.recovered = e && this._pid === e),
                (this._pid = e),
                (this.connected = !0),
                this.emitBuffered(),
                this.emitReserved("connect"),
                this._drainQueue(!0);
            },
          },
          {
            key: "emitBuffered",
            value: function () {
              var t = this;
              this.receiveBuffer.forEach(function (e) {
                return t.emitEvent(e);
              }),
                (this.receiveBuffer = []),
                this.sendBuffer.forEach(function (e) {
                  t.notifyOutgoingListeners(e), t.packet(e);
                }),
                (this.sendBuffer = []);
            },
          },
          {
            key: "ondisconnect",
            value: function () {
              this.destroy(), this.onclose("io server disconnect");
            },
          },
          {
            key: "destroy",
            value: function () {
              this.subs &&
                (this.subs.forEach(function (t) {
                  return t();
                }),
                (this.subs = void 0)),
                this.io._destroy(this);
            },
          },
          {
            key: "disconnect",
            value: function () {
              return (
                this.connected && this.packet({ type: wt.DISCONNECT }),
                this.destroy(),
                this.connected && this.onclose("io client disconnect"),
                this
              );
            },
          },
          {
            key: "close",
            value: function () {
              return this.disconnect();
            },
          },
          {
            key: "compress",
            value: function (t) {
              return (this.flags.compress = t), this;
            },
          },
          {
            key: "volatile",
            get: function () {
              return (this.flags.volatile = !0), this;
            },
          },
          {
            key: "timeout",
            value: function (t) {
              return (this.flags.timeout = t), this;
            },
          },
          {
            key: "onAny",
            value: function (t) {
              return (
                (this._anyListeners = this._anyListeners || []),
                this._anyListeners.push(t),
                this
              );
            },
          },
          {
            key: "prependAny",
            value: function (t) {
              return (
                (this._anyListeners = this._anyListeners || []),
                this._anyListeners.unshift(t),
                this
              );
            },
          },
          {
            key: "offAny",
            value: function (t) {
              if (!this._anyListeners) return this;
              if (t) {
                for (var e = this._anyListeners, n = 0; n < e.length; n++)
                  if (t === e[n]) return e.splice(n, 1), this;
              } else this._anyListeners = [];
              return this;
            },
          },
          {
            key: "listenersAny",
            value: function () {
              return this._anyListeners || [];
            },
          },
          {
            key: "onAnyOutgoing",
            value: function (t) {
              return (
                (this._anyOutgoingListeners = this._anyOutgoingListeners || []),
                this._anyOutgoingListeners.push(t),
                this
              );
            },
          },
          {
            key: "prependAnyOutgoing",
            value: function (t) {
              return (
                (this._anyOutgoingListeners = this._anyOutgoingListeners || []),
                this._anyOutgoingListeners.unshift(t),
                this
              );
            },
          },
          {
            key: "offAnyOutgoing",
            value: function (t) {
              if (!this._anyOutgoingListeners) return this;
              if (t) {
                for (
                  var e = this._anyOutgoingListeners, n = 0;
                  n < e.length;
                  n++
                )
                  if (t === e[n]) return e.splice(n, 1), this;
              } else this._anyOutgoingListeners = [];
              return this;
            },
          },
          {
            key: "listenersAnyOutgoing",
            value: function () {
              return this._anyOutgoingListeners || [];
            },
          },
          {
            key: "notifyOutgoingListeners",
            value: function (t) {
              if (
                this._anyOutgoingListeners &&
                this._anyOutgoingListeners.length
              ) {
                var e,
                  n = y(this._anyOutgoingListeners.slice());
                try {
                  for (n.s(); !(e = n.n()).done; ) {
                    e.value.apply(this, t.data);
                  }
                } catch (t) {
                  n.e(t);
                } finally {
                  n.f();
                }
              }
            },
          },
        ]),
        n
      );
    })();
  (L.prototype.duration = function () {
    var t = this.ms * Math.pow(this.factor, this.attempts++);
    if (this.jitter) {
      var e = Math.random(),
        n = Math.floor(e * this.jitter * t);
      t = 0 == (1 & Math.floor(10 * e)) ? t - n : t + n;
    }
    return 0 | Math.min(t, this.max);
  }),
    (L.prototype.reset = function () {
      this.attempts = 0;
    }),
    (L.prototype.setMin = function (t) {
      this.ms = t;
    }),
    (L.prototype.setMax = function (t) {
      this.max = t;
    }),
    (L.prototype.setJitter = function (t) {
      this.jitter = t;
    });
  var Pt = (function (n) {
      function i(n, r) {
        var o;
        e(this, i);
        var a;
        ((o = s.call(this)).nsps = {}),
          (o.subs = []),
          n && "object" === t(n) && ((r = n), (n = void 0)),
          ((r = r || {}).path = r.path || "/socket.io"),
          (o.opts = r),
          m(f(o), r),
          o.reconnection(!1 !== r.reconnection),
          o.reconnectionAttempts(r.reconnectionAttempts || 1 / 0),
          o.reconnectionDelay(r.reconnectionDelay || 1e3),
          o.reconnectionDelayMax(r.reconnectionDelayMax || 5e3),
          o.randomizationFactor(
            null !== (a = r.randomizationFactor) && void 0 !== a ? a : 0.5
          ),
          (o.backoff = new L({
            min: o.reconnectionDelay(),
            max: o.reconnectionDelayMax(),
            jitter: o.randomizationFactor(),
          })),
          o.timeout(null == r.timeout ? 2e4 : r.timeout),
          (o._readyState = "closed"),
          (o.uri = n);
        var c = r.parser || Nt;
        return (
          (o.encoder = new c.Encoder()),
          (o.decoder = new c.Decoder()),
          (o._autoConnect = !1 !== r.autoConnect),
          o._autoConnect && o.open(),
          o
        );
      }
      o(i, v);
      var s = l(i);
      return (
        r(i, [
          {
            key: "reconnection",
            value: function (t) {
              return arguments.length
                ? ((this._reconnection = !!t), this)
                : this._reconnection;
            },
          },
          {
            key: "reconnectionAttempts",
            value: function (t) {
              return void 0 === t
                ? this._reconnectionAttempts
                : ((this._reconnectionAttempts = t), this);
            },
          },
          {
            key: "reconnectionDelay",
            value: function (t) {
              var e;
              return void 0 === t
                ? this._reconnectionDelay
                : ((this._reconnectionDelay = t),
                  null === (e = this.backoff) || void 0 === e || e.setMin(t),
                  this);
            },
          },
          {
            key: "randomizationFactor",
            value: function (t) {
              var e;
              return void 0 === t
                ? this._randomizationFactor
                : ((this._randomizationFactor = t),
                  null === (e = this.backoff) || void 0 === e || e.setJitter(t),
                  this);
            },
          },
          {
            key: "reconnectionDelayMax",
            value: function (t) {
              var e;
              return void 0 === t
                ? this._reconnectionDelayMax
                : ((this._reconnectionDelayMax = t),
                  null === (e = this.backoff) || void 0 === e || e.setMax(t),
                  this);
            },
          },
          {
            key: "timeout",
            value: function (t) {
              return arguments.length
                ? ((this._timeout = t), this)
                : this._timeout;
            },
          },
          {
            key: "maybeReconnectOnOpen",
            value: function () {
              !this._reconnecting &&
                this._reconnection &&
                0 === this.backoff.attempts &&
                this.reconnect();
            },
          },
          {
            key: "open",
            value: function (t) {
              var e = this;
              if (~this._readyState.indexOf("open")) return this;
              this.engine = new bt(this.uri, this.opts);
              var n = this.engine,
                r = this;
              (this._readyState = "opening"), (this.skipReconnect = !1);
              var i = x(n, "open", function () {
                  r.onopen(), t && t();
                }),
                o = x(n, "error", function (n) {
                  r.cleanup(),
                    (r._readyState = "closed"),
                    e.emitReserved("error", n),
                    t ? t(n) : r.maybeReconnectOnOpen();
                });
              if (!1 !== this._timeout) {
                var s = this._timeout;
                0 === s && i();
                var a = this.setTimeoutFn(function () {
                  i(), n.close(), n.emit("error", new Error("timeout"));
                }, s);
                this.opts.autoUnref && a.unref(),
                  this.subs.push(function () {
                    clearTimeout(a);
                  });
              }
              return this.subs.push(i), this.subs.push(o), this;
            },
          },
          {
            key: "connect",
            value: function (t) {
              return this.open(t);
            },
          },
          {
            key: "onopen",
            value: function () {
              this.cleanup(),
                (this._readyState = "open"),
                this.emitReserved("open");
              var t = this.engine;
              this.subs.push(
                x(t, "ping", this.onping.bind(this)),
                x(t, "data", this.ondata.bind(this)),
                x(t, "error", this.onerror.bind(this)),
                x(t, "close", this.onclose.bind(this)),
                x(this.decoder, "decoded", this.ondecoded.bind(this))
              );
            },
          },
          {
            key: "onping",
            value: function () {
              this.emitReserved("ping");
            },
          },
          {
            key: "ondata",
            value: function (t) {
              try {
                this.decoder.add(t);
              } catch (t) {
                this.onclose("parse error", t);
              }
            },
          },
          {
            key: "ondecoded",
            value: function (t) {
              var e = this;
              dt(function () {
                e.emitReserved("packet", t);
              }, this.setTimeoutFn);
            },
          },
          {
            key: "onerror",
            value: function (t) {
              this.emitReserved("error", t);
            },
          },
          {
            key: "socket",
            value: function (t, e) {
              var n = this.nsps[t];
              return (
                n
                  ? this._autoConnect && !n.active && n.connect()
                  : ((n = new Lt(this, t, e)), (this.nsps[t] = n)),
                n
              );
            },
          },
          {
            key: "_destroy",
            value: function (t) {
              for (var e = 0, n = Object.keys(this.nsps); e < n.length; e++) {
                var r = n[e];
                if (this.nsps[r].active) return;
              }
              this._close();
            },
          },
          {
            key: "_packet",
            value: function (t) {
              for (var e = this.encoder.encode(t), n = 0; n < e.length; n++)
                this.engine.write(e[n], t.options);
            },
          },
          {
            key: "cleanup",
            value: function () {
              this.subs.forEach(function (t) {
                return t();
              }),
                (this.subs.length = 0),
                this.decoder.destroy();
            },
          },
          {
            key: "_close",
            value: function () {
              (this.skipReconnect = !0),
                (this._reconnecting = !1),
                this.onclose("forced close"),
                this.engine && this.engine.close();
            },
          },
          {
            key: "disconnect",
            value: function () {
              return this._close();
            },
          },
          {
            key: "onclose",
            value: function (t, e) {
              this.cleanup(),
                this.backoff.reset(),
                (this._readyState = "closed"),
                this.emitReserved("close", t, e),
                this._reconnection && !this.skipReconnect && this.reconnect();
            },
          },
          {
            key: "reconnect",
            value: function () {
              var t = this;
              if (this._reconnecting || this.skipReconnect) return this;
              var e = this;
              if (this.backoff.attempts >= this._reconnectionAttempts)
                this.backoff.reset(),
                  this.emitReserved("reconnect_failed"),
                  (this._reconnecting = !1);
              else {
                var n = this.backoff.duration();
                this._reconnecting = !0;
                var r = this.setTimeoutFn(function () {
                  e.skipReconnect ||
                    (t.emitReserved("reconnect_attempt", e.backoff.attempts),
                    e.skipReconnect ||
                      e.open(function (n) {
                        n
                          ? ((e._reconnecting = !1),
                            e.reconnect(),
                            t.emitReserved("reconnect_error", n))
                          : e.onreconnect();
                      }));
                }, n);
                this.opts.autoUnref && r.unref(),
                  this.subs.push(function () {
                    clearTimeout(r);
                  });
              }
            },
          },
          {
            key: "onreconnect",
            value: function () {
              var t = this.backoff.attempts;
              (this._reconnecting = !1),
                this.backoff.reset(),
                this.emitReserved("reconnect", t);
            },
          },
        ]),
        i
      );
    })(),
    jt = {};
  return i(P, { Manager: Pt, Socket: Lt, io: P, connect: P }), P;
});
