function CDifficutlyMenu() {
  var e,
    t,
    i,
    s,
    n,
    o,
    _,
    u,
    l,
    a,
    r,
    c,
    f,
    E = null,
    S = null;
  (this._init = function () {
    (n = createBitmap(s_oSpriteLibrary.getSprite("bg_menu"))),
      s_oStage.addChild(n);
    var d = s_oSpriteLibrary.getSprite("but_lang"),
      h = s_oSpriteLibrary.getSprite("but_exit");
    (t = { x: CANVAS_WIDTH - h.width / 2 - 10, y: d.height / 2 + 10 }),
      (_ = new CGfxButton(t.x, t.y, h, s_oStage)).addEventListener(
        ON_MOUSE_DOWN,
        this._onMouseDownButExit,
        this
      );
    var g = s_oSpriteLibrary.getSprite("audio_icon");
    !1 === DISABLE_SOUND_MOBILE || !1 === s_bMobile
      ? ((e = { x: t.x - g.width / 2 - 10, y: t.y }),
        (o = new CToggle(
          e.x,
          e.y,
          g,
          s_bAudioActive,
          s_oStage
        )).addEventListener(ON_MOUSE_UP, this._onAudioToggle, this),
        (s = { x: e.x - d.width / NUM_LANGUAGES - 10, y: e.y }))
      : (s = { x: t.x - h.width / 2 - 10, y: t.y }),
      (a = new CButLang(
        s.x,
        s.y,
        NUM_LANGUAGES,
        s_iCurLang,
        d,
        s_oStage
      )).addEventListener(ON_SELECT_LANG, this._onChangeLang, this);
    var T = window.document,
      A = T.documentElement;
    (E =
      A.requestFullscreen ||
      A.mozRequestFullScreen ||
      A.webkitRequestFullScreen ||
      A.msRequestFullscreen),
      (S =
        T.exitFullscreen ||
        T.mozCancelFullScreen ||
        T.webkitExitFullscreen ||
        T.msExitFullscreen),
      !1 === ENABLE_FULLSCREEN && (E = !1),
      E &&
        screenfull.isEnabled &&
        ((g = s_oSpriteLibrary.getSprite("but_fullscreen")),
        (i = { x: g.width / 4 + 10, y: g.height / 2 + 10 }),
        (l = new CToggle(
          i.x,
          i.y,
          g,
          s_bFullscreen,
          s_oStage
        )).addEventListener(ON_MOUSE_UP, this._onFullscreenRelease, this));
    var x = { x: CANVAS_WIDTH / 2, y: CANVAS_HEIGHT / 2 - 200 };
    (r = new CTextButton(
      x.x,
      x.y,
      s_oSpriteLibrary.getSprite("but_text"),
      TEXT_EASY,
      FONT_GAME,
      "#fff",
      60,
      "center",
      s_oStage
    )).setTextOffsetX(10),
      r.setTextOffsetY(10),
      r.addEventListenerWithParams(
        ON_MOUSE_DOWN,
        this._onPressDownButDifficulty,
        this,
        EASY
      );
    var O = { x: CANVAS_WIDTH / 2, y: CANVAS_HEIGHT / 2 };
    (c = new CTextButton(
      O.x,
      O.y,
      s_oSpriteLibrary.getSprite("but_text"),
      TEXT_MEDIUM,
      FONT_GAME,
      "#fff",
      60,
      "center",
      s_oStage
    )).addEventListenerWithParams(
      ON_MOUSE_DOWN,
      this._onPressDownButDifficulty,
      this,
      MEDIUM
    ),
      c.setTextOffsetX(10),
      c.setTextOffsetY(10);
    var y = { x: CANVAS_WIDTH / 2, y: CANVAS_HEIGHT / 2 + 200 };
    (f = new CTextButton(
      y.x,
      y.y,
      s_oSpriteLibrary.getSprite("but_text"),
      TEXT_HARD,
      FONT_GAME,
      "#fff",
      60,
      "center",
      s_oStage
    )).setTextOffsetX(10),
      f.setTextOffsetY(10),
      f.addEventListenerWithParams(
        ON_MOUSE_DOWN,
        this._onPressDownButDifficulty,
        this,
        HARD
      ),
      (u = new createjs.Shape()).graphics
        .beginFill("black")
        .drawRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT),
      s_oStage.addChild(u),
      createjs.Tween.get(u).to({ alpha: 0 }, 1e3, createjs.Ease.cubicOut),
      sizeHandler(),
      r.changeText(TEXT_EASY),
      c.changeText(TEXT_MEDIUM),
      f.changeText(TEXT_HARD);
  }),
    (this._onPressDownButDifficulty = function (e) {
      (s_iGameDifficulty = e),
        this._onExit(function () {
          s_oDifficultyMenu.unload(),
            s_oMain.gotoGame(),
            $(s_oMain).trigger("start_session");
        });
    }),
    (this._onMouseDownButExit = function () {
      this._onExit(function () {
        s_oDifficultyMenu.unload(), s_oMain.gotoMenu();
      });
    }),
    (this._onExit = function (e) {
      u.on("click", function () {}),
        (u.visible = !0),
        createjs.Tween.get(u)
          .to({ alpha: 1 }, 1e3, createjs.Ease.cubicOut)
          .call(e);
    }),
    (this.unload = function () {
      r.unload(),
        c.unload(),
        f.unload(),
        (!1 !== DISABLE_SOUND_MOBILE && !1 !== s_bMobile) ||
          (o.unload(), (o = null)),
        E && screenfull.isEnabled && l.unload(),
        a.unload(),
        u.removeAllEventListeners(),
        s_oStage.removeAllChildren(),
        (s_oDifficultyMenu = null);
    }),
    (this.refreshButtonPos = function () {
      (!1 !== DISABLE_SOUND_MOBILE && !1 !== s_bMobile) ||
        o.setPosition(e.x - s_iOffsetX, s_iOffsetY + e.y),
        E &&
          screenfull.isEnabled &&
          l.setPosition(i.x + s_iOffsetX, i.y + s_iOffsetY),
        a.setPosition(s.x - s_iOffsetX, s.y + s_iOffsetY),
        _.setPosition(t.x - s_iOffsetX, t.y + s_iOffsetY);
    }),
    (this._onChangeLang = function (e) {
      (s_iCurLang = e),
        refreshLanguage(),
        r.changeText(TEXT_EASY),
        c.changeText(TEXT_MEDIUM),
        f.changeText(TEXT_HARD);
    }),
    (this._onAudioToggle = function () {
      Howler.mute(s_bAudioActive), (s_bAudioActive = !s_bAudioActive);
    }),
    (this.resetFullscreenBut = function () {
      E && screenfull.isEnabled && l.setActive(s_bFullscreen);
    }),
    (this._onFullscreenRelease = function () {
      s_bFullscreen
        ? S.call(window.document)
        : E.call(window.document.documentElement),
        sizeHandler();
    }),
    (s_oDifficultyMenu = this),
    this._init();
}
var s_oDifficultyMenu = null;
